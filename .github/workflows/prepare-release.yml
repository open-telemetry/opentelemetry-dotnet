name: Prepare for a release

on:
  workflow_dispatch:
    inputs:
      tag-prefix:
        type: choice
        options:
        - core-
        - coreunstable-
        description: 'Release tag prefix'
        required: true
      version:
        type: string
        description: 'Release version'
        required: true

  pull_request:
    types:
    - closed

  issue_comment:
    types:
    - created

permissions:
  contents: read

jobs:
  automation:
    uses: ./.github/workflows/automation.yml
    secrets: inherit

  prepare-release-pr:
    runs-on: ubuntu-22.04

    needs: automation

    if: github.event_name == 'workflow_dispatch' && needs.automation.outputs.enabled

    env:
      GH_TOKEN: ${{ secrets[needs.automation.outputs.token-secret-name] }}

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        token: ${{ env.GH_TOKEN }}

    - name: Create GitHub Pull Request to prepare release
      shell: pwsh
      env:
        BOT_USER_EMAIL: ${{ needs.automation.outputs.email }}
        BOT_USER_NAME: ${{ needs.automation.outputs.username }}
        COMMENT_USER_NAME: ${{ github.event.sender.login }}
        TAG_PREFIX: ${{ inputs.tag-prefix }}
        VERSION: ${{ inputs.version }}
      run: |
        Import-Module .\build\scripts\prepare-release.psm1

        CreatePullRequestToUpdateChangelogsAndPublicApis `
          -gitRepository ${env:GITHUB_REPOSITORY} `
          -minVerTagPrefix ${env:TAG_PREFIX} `
          -version ${env:VERSION} `
          -requestedByUserName ${env:COMMENT_USER_NAME} `
          -targetBranch ${env:GITHUB_REF_NAME} `
          -gitUserName ${env:BOT_USER_NAME} `
          -gitUserEmail ${env:BOT_USER_EMAIL}

  lock-pr-and-post-notice-to-create-release-tag:
    runs-on: ubuntu-22.04

    needs: automation

    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.user.login == needs.automation.outputs.username &&
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.title, '[release] Prepare release ') &&
      needs.automation.outputs.enabled

    env:
      GH_TOKEN: ${{ secrets[needs.automation.outputs.token-secret-name] }}

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        token: ${{ env.GH_TOKEN }}

    - name: Lock GitHub Pull Request to prepare release
      shell: pwsh
      env:
        BOT_USER_NAME: ${{ needs.automation.outputs.username }}
        ISSUE_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        Import-Module .\build\scripts\prepare-release.psm1

        LockPullRequestAndPostNoticeToCreateReleaseTag `
          -gitRepository ${env:GITHUB_REPOSITORY} `
          -pullRequestNumber ${env:ISSUE_NUMBER} `
          -botUserName ${env:BOT_USER_NAME}

  create-release-tag-pr-post-notice:
    runs-on: ubuntu-22.04

    needs: automation

    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      github.event.issue.locked == true &&
      github.event.comment.user.login != needs.automation.outputs.username &&
      contains(github.event.comment.body, '/CreateReleaseTag') &&
      startsWith(github.event.issue.title, '[release] Prepare release ') &&
      github.event.issue.pull_request.merged_at &&
      needs.automation.outputs.enabled

    env:
      GH_TOKEN: ${{ secrets[needs.automation.outputs.token-secret-name] }}

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        # Note: By default GitHub only fetches 1 commit which fails the git tag operation below
        fetch-depth: 0
        token: ${{ env.GH_TOKEN }}

    - name: Create release tag
      id: create-tag
      shell: pwsh
      env:
        BOT_USER_EMAIL: ${{ needs.automation.outputs.email }}
        BOT_USER_NAME: ${{ needs.automation.outputs.username }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      run: |
        Import-Module .\build\scripts\prepare-release.psm1

        CreateReleaseTagAndPostNoticeOnPullRequest `
          -gitRepository ${env:GITHUB_REPOSITORY} `
          -pullRequestNumber ${env:ISSUE_NUMBER} `
          -botUserName ${env:BOT_USER_NAME} `
          -gitUserName ${env:BOT_USER_NAME} `
          -gitUserEmail ${env:BOT_USER_EMAIL}

  update-changelog-release-dates-on-prepare-pr-post-notice:
    runs-on: ubuntu-22.04

    needs: automation

    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      github.event.issue.state == 'open' &&
      github.event.comment.user.login != needs.automation.outputs.username &&
      contains(github.event.comment.body, '/UpdateReleaseDates') &&
      startsWith(github.event.issue.title, '[release] Prepare release ') &&
      github.event.issue.pull_request.merged_at == null &&
      needs.automation.outputs.enabled

    env:
      GH_TOKEN: ${{ secrets[needs.automation.outputs.token-secret-name] }}

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        # Note: By default GitHub only fetches 1 commit which fails the git tag operation below
        fetch-depth: 0
        token: ${{ env.GH_TOKEN }}

    - name: Update release date
      shell: pwsh
      env:
        BOT_USER_EMAIL: ${{ needs.automation.outputs.email }}
        BOT_USER_NAME: ${{ needs.automation.outputs.username }}
        COMMENT_USER_NAME: ${{ github.event.comment.user.login }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      run: |
        Import-Module .\build\scripts\prepare-release.psm1

        UpdateChangelogReleaseDatesAndPostNoticeOnPullRequest `
          -gitRepository ${env:GITHUB_REPOSITORY} `
          -pullRequestNumber ${env:ISSUE_NUMBER} `
          -botUserName ${env:BOT_USER_NAME} `
          -commentUserName ${env:COMMENT_USER_NAME} `
          -gitUserName ${env:BOT_USER_NAME} `
          -gitUserEmail ${env:BOT_USER_EMAIL}

  update-releasenotes-on-prepare-pr-post-notice:
    runs-on: ubuntu-22.04

    needs: automation

    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      github.event.issue.state == 'open' &&
      github.event.comment.user.login != needs.automation.outputs.username &&
      contains(github.event.comment.body, '/UpdateReleaseNotes') &&
      startsWith(github.event.issue.title, '[release] Prepare release ') &&
      github.event.issue.pull_request.merged_at == null &&
      needs.automation.outputs.enabled

    env:
      GH_TOKEN: ${{ secrets[needs.automation.outputs.token-secret-name] }}

    steps:
    - name: Check out code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        # Note: By default GitHub only fetches 1 commit which fails the git tag operation below
        fetch-depth: 0
        token: ${{ env.GH_TOKEN }}

    - name: Update release notes
      env:
        BOT_USER_EMAIL: ${{ needs.automation.outputs.email }}
        BOT_USER_NAME: ${{ needs.automation.outputs.username }}
        COMMENT_BODY: ${{ github.event.comment.body }}
        COMMENT_USER_NAME: ${{ github.event.comment.user.login }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      shell: pwsh
      run: |
        Import-Module .\build\scripts\prepare-release.psm1

        UpdateReleaseNotesAndPostNoticeOnPullRequest `
          -gitRepository ${env:GITHUB_REPOSITORY} `
          -pullRequestNumber ${env:ISSUE_NUMBER} `
          -botUserName ${env:BOT_USER_NAME} `
          -commentUserName ${env:COMMENT_USER_NAME} `
          -commentBody $Env:COMMENT_BODY `
          -gitUserName ${env:BOT_USER_NAME} `
          -gitUserEmail ${env:BOT_USER_EMAIL}
