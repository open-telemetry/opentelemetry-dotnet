// <copyright file="ResourceSemanticConventions.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/SemanticConventions.cs.j2</auto-generated>

using System;

namespace OpenTelemetry.Resources
{
    /// <summary>
    /// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
    /// <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md"/>.
    /// </summary>
    /// <remarks>
    /// Schema and specification version: https://opentelemetry.io/schemas/v1.13.0.
    /// </remarks>
    public static class ResourceSemanticConventions
    {
        /// <summary>
        /// Array of brand name and version separated by a space.
        /// </summary>
        /// <remarks>
        /// This value is intended to be taken from the <a href="https://wicg.github.io/ua-client-hints/#interface">UA client hints API</a> (navigator.userAgentData.brands).
        /// </remarks>
        public const string AttributeBrowserBrands = "browser.brands";

        /// <summary>
        /// The platform on which the browser is running.
        /// </summary>
        /// <remarks>
        /// This value is intended to be taken from the <a href="https://wicg.github.io/ua-client-hints/#interface">UA client hints API</a> (navigator.userAgentData.platform). If unavailable, the legacy <c>navigator.platform</c> API SHOULD NOT be used instead and this attribute SHOULD be left unset in order for the values to be consistent.
        /// The list of possible values is defined in the <a href="https://wicg.github.io/ua-client-hints/#sec-ch-ua-platform">W3C User-Agent Client Hints specification</a>. Note that some (but not all) of these values can overlap with values in the <a href="./os.md">os.type and os.name attributes</a>. However, for consistency, the values in the <c>browser.platform</c> attribute should capture the exact value that the user agent provides.
        /// </remarks>
        public const string AttributeBrowserPlatform = "browser.platform";

        /// <summary>
        /// Full user-agent string provided by the browser.
        /// </summary>
        /// <remarks>
        /// The user-agent value SHOULD be provided only from browsers that do not have a mechanism to retrieve brands and platform individually from the User-Agent Client Hints API. To retrieve the value, the legacy <c>navigator.userAgent</c> API can be used.
        /// </remarks>
        public const string AttributeBrowserUserAgent = "browser.user_agent";

        /// <summary>
        /// Name of the cloud provider.
        /// </summary>
        public const string AttributeCloudProvider = "cloud.provider";

        /// <summary>
        /// The cloud account ID the resource is assigned to.
        /// </summary>
        public const string AttributeCloudAccountId = "cloud.account.id";

        /// <summary>
        /// The geographical region the resource is running.
        /// </summary>
        /// <remarks>
        /// Refer to your provider&amp;#39;s docs to see the available regions, for example <a href="https://www.alibabacloud.com/help/doc-detail/40654.htm">Alibaba Cloud regions</a>, <a href="https://aws.amazon.com/about-aws/global-infrastructure/regions_az/">AWS regions</a>, <a href="https://azure.microsoft.com/en-us/global-infrastructure/geographies/">Azure regions</a>, <a href="https://cloud.google.com/about/locations">Google Cloud regions</a>, or <a href="https://intl.cloud.tencent.com/document/product/213/6091">Tencent Cloud regions</a>.
        /// </remarks>
        public const string AttributeCloudRegion = "cloud.region";

        /// <summary>
        /// Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.
        /// </summary>
        /// <remarks>
        /// Availability zones are called &amp;#34;zones&amp;#34; on Alibaba Cloud and Google Cloud.
        /// </remarks>
        public const string AttributeCloudAvailabilityZone = "cloud.availability_zone";

        /// <summary>
        /// The cloud platform in use.
        /// </summary>
        /// <remarks>
        /// The prefix of the service SHOULD match the one specified in <c>cloud.provider</c>.
        /// </remarks>
        public const string AttributeCloudPlatform = "cloud.platform";

        /// <summary>
        /// The Amazon Resource Name (ARN) of an <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html">ECS container instance</a>.
        /// </summary>
        public const string AttributeAwsEcsContainerArn = "aws.ecs.container.arn";

        /// <summary>
        /// The ARN of an <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html">ECS cluster</a>.
        /// </summary>
        public const string AttributeAwsEcsClusterArn = "aws.ecs.cluster.arn";

        /// <summary>
        /// The <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">launch type</a> for an ECS task.
        /// </summary>
        public const string AttributeAwsEcsLaunchtype = "aws.ecs.launchtype";

        /// <summary>
        /// The ARN of an <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html">ECS task definition</a>.
        /// </summary>
        public const string AttributeAwsEcsTaskArn = "aws.ecs.task.arn";

        /// <summary>
        /// The task definition family this task definition is a member of.
        /// </summary>
        public const string AttributeAwsEcsTaskFamily = "aws.ecs.task.family";

        /// <summary>
        /// The revision for this task definition.
        /// </summary>
        public const string AttributeAwsEcsTaskRevision = "aws.ecs.task.revision";

        /// <summary>
        /// The ARN of an EKS cluster.
        /// </summary>
        public const string AttributeAwsEksClusterArn = "aws.eks.cluster.arn";

        /// <summary>
        /// The name(s) of the AWS log group(s) an application is writing to.
        /// </summary>
        /// <remarks>
        /// Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.
        /// </remarks>
        public const string AttributeAwsLogGroupNames = "aws.log.group.names";

        /// <summary>
        /// The Amazon Resource Name(s) (ARN) of the AWS log group(s).
        /// </summary>
        /// <remarks>
        /// See the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format">log group ARN format documentation</a>.
        /// </remarks>
        public const string AttributeAwsLogGroupArns = "aws.log.group.arns";

        /// <summary>
        /// The name(s) of the AWS log stream(s) an application is writing to.
        /// </summary>
        public const string AttributeAwsLogStreamNames = "aws.log.stream.names";

        /// <summary>
        /// The ARN(s) of the AWS log stream(s).
        /// </summary>
        /// <remarks>
        /// See the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format">log stream ARN format documentation</a>. One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.
        /// </remarks>
        public const string AttributeAwsLogStreamArns = "aws.log.stream.arns";

        /// <summary>
        /// Container name used by container runtime.
        /// </summary>
        public const string AttributeContainerName = "container.name";

        /// <summary>
        /// Container ID. Usually a UUID, as for example used to <a href="https://docs.docker.com/engine/reference/run/#container-identification">identify Docker containers</a>. The UUID might be abbreviated.
        /// </summary>
        public const string AttributeContainerId = "container.id";

        /// <summary>
        /// The container runtime managing this container.
        /// </summary>
        public const string AttributeContainerRuntime = "container.runtime";

        /// <summary>
        /// Name of the image the container was built on.
        /// </summary>
        public const string AttributeContainerImageName = "container.image.name";

        /// <summary>
        /// Container image tag.
        /// </summary>
        public const string AttributeContainerImageTag = "container.image.tag";

        /// <summary>
        /// Name of the <a href="https://en.wikipedia.org/wiki/Deployment_environment">deployment environment</a> (aka deployment tier).
        /// </summary>
        public const string AttributeDeploymentEnvironment = "deployment.environment";

        /// <summary>
        /// A unique identifier representing the device.
        /// </summary>
        /// <remarks>
        /// The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the <a href="https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor">vendor identifier</a>. On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found <a href="https://developer.android.com/training/articles/user-data-ids">here</a> on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.
        /// </remarks>
        public const string AttributeDeviceId = "device.id";

        /// <summary>
        /// The model identifier for the device.
        /// </summary>
        /// <remarks>
        /// It&amp;#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.
        /// </remarks>
        public const string AttributeDeviceModelIdentifier = "device.model.identifier";

        /// <summary>
        /// The marketing name for the device model.
        /// </summary>
        /// <remarks>
        /// It&amp;#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.
        /// </remarks>
        public const string AttributeDeviceModelName = "device.model.name";

        /// <summary>
        /// The name of the device manufacturer.
        /// </summary>
        /// <remarks>
        /// The Android OS provides this field via <a href="https://developer.android.com/reference/android/os/Build#MANUFACTURER">Build</a>. iOS apps SHOULD hardcode the value <c>Apple</c>.
        /// </remarks>
        public const string AttributeDeviceManufacturer = "device.manufacturer";

        /// <summary>
        /// The name of the single function that this runtime instance executes.
        /// </summary>
        /// <remarks>
        /// This is the name of the function as configured/deployed on the FaaS
        /// platform and is usually different from the name of the callback
        /// function (which may be stored in the
        /// <a href="../../trace/semantic_conventions/span-general.md#source-code-attributes"><c>code.namespace</c>/<c>code.function</c></a>
        /// span attributes).For some cloud providers, the above definition is ambiguous. The following
        /// definition of function name MUST be used for this attribute
        /// (and consequently the span name) for the listed cloud providers/products:<ul>
        /// <li><strong>Azure:</strong>  The full name <c>&lt;FUNCAPP&gt;/&lt;FUNC&gt;</c>, i.e., function app name
        /// followed by a forward slash followed by the function name (this form
        /// can also be seen in the resource JSON for the function).
        /// This means that a span attribute MUST be used, as an Azure function
        /// app can host multiple functions that would usually share
        /// a TracerProvider (see also the <c>faas.id</c> attribute)</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasName = "faas.name";

        /// <summary>
        /// The unique ID of the single function that this runtime instance executes.
        /// </summary>
        /// <remarks>
        /// On some cloud providers, it may not be possible to determine the full ID at startup,
        /// so consider setting <c>faas.id</c> as a span attribute instead.The exact value to use for <c>faas.id</c> depends on the cloud provider:<ul>
        /// <li><strong>AWS Lambda:</strong> The function <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a>.
        /// Take care not to use the &amp;#34;invoked ARN&amp;#34; directly but replace any
        /// <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html">alias suffix</a>
        /// with the resolved function version, as the same runtime instance may be invokable with
        /// multiple different aliases.</li>
        /// <li><strong>GCP:</strong> The <a href="https://cloud.google.com/iam/docs/full-resource-names">URI of the resource</a></li>
        /// <li><strong>Azure:</strong> The <a href="https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id">Fully Qualified Resource ID</a> of the invoked function,
        /// <em>not</em> the function app, having the form
        /// <c>/subscriptions/&lt;SUBSCIPTION_GUID&gt;/resourceGroups/&lt;RG&gt;/providers/Microsoft.Web/sites/&lt;FUNCAPP&gt;/functions/&lt;FUNC&gt;</c>.
        /// This means that a span attribute MUST be used, as an Azure function app can host multiple functions that would usually share
        /// a TracerProvider</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasId = "faas.id";

        /// <summary>
        /// The immutable version of the function being executed.
        /// </summary>
        /// <remarks>
        /// Depending on the cloud provider and platform, use:<ul>
        /// <li><strong>AWS Lambda:</strong> The <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html">function version</a>
        /// (an integer represented as a decimal string).</li>
        /// <li><strong>Google Cloud Run:</strong> The <a href="https://cloud.google.com/run/docs/managing/revisions">revision</a>
        /// (i.e., the function name plus the revision suffix).</li>
        /// <li><strong>Google Cloud Functions:</strong> The value of the
        /// <a href="https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically"><c>K_REVISION</c> environment variable</a>.</li>
        /// <li><strong>Azure Functions:</strong> Not applicable. Do not set this attribute</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasVersion = "faas.version";

        /// <summary>
        /// The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.
        /// </summary>
        /// <remarks>
        /// <ul>
        /// <li><strong>AWS Lambda:</strong> Use the (full) log stream name</li>
        /// </ul>.
        /// </remarks>
        public const string AttributeFaasInstance = "faas.instance";

        /// <summary>
        /// The amount of memory available to the serverless function in MiB.
        /// </summary>
        /// <remarks>
        /// It&amp;#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable <c>AWS_LAMBDA_FUNCTION_MEMORY_SIZE</c> provides this information.
        /// </remarks>
        public const string AttributeFaasMaxMemory = "faas.max_memory";

        /// <summary>
        /// Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.
        /// </summary>
        public const string AttributeHostId = "host.id";

        /// <summary>
        /// Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.
        /// </summary>
        public const string AttributeHostName = "host.name";

        /// <summary>
        /// Type of host. For Cloud, this must be the machine type.
        /// </summary>
        public const string AttributeHostType = "host.type";

        /// <summary>
        /// The CPU architecture the host system is running on.
        /// </summary>
        public const string AttributeHostArch = "host.arch";

        /// <summary>
        /// Name of the VM image or OS install the host was instantiated from.
        /// </summary>
        public const string AttributeHostImageName = "host.image.name";

        /// <summary>
        /// VM image ID. For Cloud, this value is from the provider.
        /// </summary>
        public const string AttributeHostImageId = "host.image.id";

        /// <summary>
        /// The version string of the VM image as defined in <a href="README.md#version-attributes">Version Attributes</a>.
        /// </summary>
        public const string AttributeHostImageVersion = "host.image.version";

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        public const string AttributeK8sClusterName = "k8s.cluster.name";

        /// <summary>
        /// The name of the Node.
        /// </summary>
        public const string AttributeK8sNodeName = "k8s.node.name";

        /// <summary>
        /// The UID of the Node.
        /// </summary>
        public const string AttributeK8sNodeUid = "k8s.node.uid";

        /// <summary>
        /// The name of the namespace that the pod is running in.
        /// </summary>
        public const string AttributeK8sNamespaceName = "k8s.namespace.name";

        /// <summary>
        /// The UID of the Pod.
        /// </summary>
        public const string AttributeK8sPodUid = "k8s.pod.uid";

        /// <summary>
        /// The name of the Pod.
        /// </summary>
        public const string AttributeK8sPodName = "k8s.pod.name";

        /// <summary>
        /// The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (<c>container.name</c>).
        /// </summary>
        public const string AttributeK8sContainerName = "k8s.container.name";

        /// <summary>
        /// Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
        /// </summary>
        public const string AttributeK8sContainerRestartCount = "k8s.container.restart_count";

        /// <summary>
        /// The UID of the ReplicaSet.
        /// </summary>
        public const string AttributeK8sReplicasetUid = "k8s.replicaset.uid";

        /// <summary>
        /// The name of the ReplicaSet.
        /// </summary>
        public const string AttributeK8sReplicasetName = "k8s.replicaset.name";

        /// <summary>
        /// The UID of the Deployment.
        /// </summary>
        public const string AttributeK8sDeploymentUid = "k8s.deployment.uid";

        /// <summary>
        /// The name of the Deployment.
        /// </summary>
        public const string AttributeK8sDeploymentName = "k8s.deployment.name";

        /// <summary>
        /// The UID of the StatefulSet.
        /// </summary>
        public const string AttributeK8sStatefulsetUid = "k8s.statefulset.uid";

        /// <summary>
        /// The name of the StatefulSet.
        /// </summary>
        public const string AttributeK8sStatefulsetName = "k8s.statefulset.name";

        /// <summary>
        /// The UID of the DaemonSet.
        /// </summary>
        public const string AttributeK8sDaemonsetUid = "k8s.daemonset.uid";

        /// <summary>
        /// The name of the DaemonSet.
        /// </summary>
        public const string AttributeK8sDaemonsetName = "k8s.daemonset.name";

        /// <summary>
        /// The UID of the Job.
        /// </summary>
        public const string AttributeK8sJobUid = "k8s.job.uid";

        /// <summary>
        /// The name of the Job.
        /// </summary>
        public const string AttributeK8sJobName = "k8s.job.name";

        /// <summary>
        /// The UID of the CronJob.
        /// </summary>
        public const string AttributeK8sCronjobUid = "k8s.cronjob.uid";

        /// <summary>
        /// The name of the CronJob.
        /// </summary>
        public const string AttributeK8sCronjobName = "k8s.cronjob.name";

        /// <summary>
        /// The operating system type.
        /// </summary>
        public const string AttributeOsType = "os.type";

        /// <summary>
        /// Human readable (not intended to be parsed) OS version information, like e.g. reported by <c>ver</c> or <c>lsb_release -a</c> commands.
        /// </summary>
        public const string AttributeOsDescription = "os.description";

        /// <summary>
        /// Human readable operating system name.
        /// </summary>
        public const string AttributeOsName = "os.name";

        /// <summary>
        /// The version string of the operating system as defined in <a href="../../resource/semantic_conventions/README.md#version-attributes">Version Attributes</a>.
        /// </summary>
        public const string AttributeOsVersion = "os.version";

        /// <summary>
        /// Process identifier (PID).
        /// </summary>
        public const string AttributeProcessPid = "process.pid";

        /// <summary>
        /// Parent Process identifier (PID).
        /// </summary>
        public const string AttributeProcessParentPid = "process.parent_pid";

        /// <summary>
        /// The name of the process executable. On Linux based systems, can be set to the <c>Name</c> in <c>proc/[pid]/status</c>. On Windows, can be set to the base name of <c>GetProcessImageFileNameW</c>.
        /// </summary>
        public const string AttributeProcessExecutableName = "process.executable.name";

        /// <summary>
        /// The full path to the process executable. On Linux based systems, can be set to the target of <c>proc/[pid]/exe</c>. On Windows, can be set to the result of <c>GetProcessImageFileNameW</c>.
        /// </summary>
        public const string AttributeProcessExecutablePath = "process.executable.path";

        /// <summary>
        /// The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in <c>proc/[pid]/cmdline</c>. On Windows, can be set to the first parameter extracted from <c>GetCommandLineW</c>.
        /// </summary>
        public const string AttributeProcessCommand = "process.command";

        /// <summary>
        /// The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of <c>GetCommandLineW</c>. Do not set this if you have to assemble it just for monitoring; use <c>process.command_args</c> instead.
        /// </summary>
        public const string AttributeProcessCommandLine = "process.command_line";

        /// <summary>
        /// All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from <c>proc/[pid]/cmdline</c>. For libc-based executables, this would be the full argv vector passed to <c>main</c>.
        /// </summary>
        public const string AttributeProcessCommandArgs = "process.command_args";

        /// <summary>
        /// The username of the user that owns the process.
        /// </summary>
        public const string AttributeProcessOwner = "process.owner";

        /// <summary>
        /// The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.
        /// </summary>
        public const string AttributeProcessRuntimeName = "process.runtime.name";

        /// <summary>
        /// The version of the runtime of this process, as returned by the runtime without modification.
        /// </summary>
        public const string AttributeProcessRuntimeVersion = "process.runtime.version";

        /// <summary>
        /// An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
        /// </summary>
        public const string AttributeProcessRuntimeDescription = "process.runtime.description";

        /// <summary>
        /// Logical name of the service.
        /// </summary>
        /// <remarks>
        /// MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to <c>unknown_service:</c> concatenated with <a href="process.md#process"><c>process.executable.name</c></a>, e.g. <c>unknown_service:bash</c>. If <c>process.executable.name</c> is not available, the value MUST be set to <c>unknown_service</c>.
        /// </remarks>
        public const string AttributeServiceName = "service.name";

        /// <summary>
        /// A namespace for <c>service.name</c>.
        /// </summary>
        /// <remarks>
        /// A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. <c>service.name</c> is expected to be unique within the same namespace. If <c>service.namespace</c> is not specified in the Resource then <c>service.name</c> is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.
        /// </remarks>
        public const string AttributeServiceNamespace = "service.namespace";

        /// <summary>
        /// The string ID of the service instance.
        /// </summary>
        /// <remarks>
        /// MUST be unique for each instance of the same <c>service.namespace,service.name</c> pair (in other words <c>service.namespace,service.name,service.instance.id</c> triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).
        /// </remarks>
        public const string AttributeServiceInstanceId = "service.instance.id";

        /// <summary>
        /// The version string of the service API or implementation.
        /// </summary>
        public const string AttributeServiceVersion = "service.version";

        /// <summary>
        /// The name of the telemetry SDK as defined above.
        /// </summary>
        public const string AttributeTelemetrySdkName = "telemetry.sdk.name";

        /// <summary>
        /// The language of the telemetry SDK.
        /// </summary>
        public const string AttributeTelemetrySdkLanguage = "telemetry.sdk.language";

        /// <summary>
        /// The version string of the telemetry SDK.
        /// </summary>
        public const string AttributeTelemetrySdkVersion = "telemetry.sdk.version";

        /// <summary>
        /// The version string of the auto instrumentation agent, if used.
        /// </summary>
        public const string AttributeTelemetryAutoVersion = "telemetry.auto.version";

        /// <summary>
        /// The name of the web engine.
        /// </summary>
        public const string AttributeWebengineName = "webengine.name";

        /// <summary>
        /// The version of the web engine.
        /// </summary>
        public const string AttributeWebengineVersion = "webengine.version";

        /// <summary>
        /// Additional description of the web engine (e.g. detailed version and edition information).
        /// </summary>
        public const string AttributeWebengineDescription = "webengine.description";

        /// <summary>
        /// Prefix for 'browser'.
        /// </summary>
        public static readonly string PrefixBrowser = "browser";

        /// <summary>
        /// Prefix for 'cloud'.
        /// </summary>
        public static readonly string PrefixCloud = "cloud";

        /// <summary>
        /// Prefix for 'aws.ecs'.
        /// </summary>
        public static readonly string PrefixAwsEcs = "aws.ecs";

        /// <summary>
        /// Prefix for 'aws.eks'.
        /// </summary>
        public static readonly string PrefixAwsEks = "aws.eks";

        /// <summary>
        /// Prefix for 'aws.log'.
        /// </summary>
        public static readonly string PrefixAwsLog = "aws.log";

        /// <summary>
        /// Prefix for 'container'.
        /// </summary>
        public static readonly string PrefixContainer = "container";

        /// <summary>
        /// Prefix for 'deployment'.
        /// </summary>
        public static readonly string PrefixDeployment = "deployment";

        /// <summary>
        /// Prefix for 'device'.
        /// </summary>
        public static readonly string PrefixDevice = "device";

        /// <summary>
        /// Prefix for 'faas_resource'.
        /// </summary>
        public static readonly string PrefixFaasResource = "faas";

        /// <summary>
        /// Prefix for 'host'.
        /// </summary>
        public static readonly string PrefixHost = "host";

        /// <summary>
        /// Prefix for 'k8s.cluster'.
        /// </summary>
        public static readonly string PrefixK8sCluster = "k8s.cluster";

        /// <summary>
        /// Prefix for 'k8s.node'.
        /// </summary>
        public static readonly string PrefixK8sNode = "k8s.node";

        /// <summary>
        /// Prefix for 'k8s.namespace'.
        /// </summary>
        public static readonly string PrefixK8sNamespace = "k8s.namespace";

        /// <summary>
        /// Prefix for 'k8s.pod'.
        /// </summary>
        public static readonly string PrefixK8sPod = "k8s.pod";

        /// <summary>
        /// Prefix for 'k8s.container'.
        /// </summary>
        public static readonly string PrefixK8sContainer = "k8s.container";

        /// <summary>
        /// Prefix for 'k8s.replicaset'.
        /// </summary>
        public static readonly string PrefixK8sReplicaset = "k8s.replicaset";

        /// <summary>
        /// Prefix for 'k8s.deployment'.
        /// </summary>
        public static readonly string PrefixK8sDeployment = "k8s.deployment";

        /// <summary>
        /// Prefix for 'k8s.statefulset'.
        /// </summary>
        public static readonly string PrefixK8sStatefulset = "k8s.statefulset";

        /// <summary>
        /// Prefix for 'k8s.daemonset'.
        /// </summary>
        public static readonly string PrefixK8sDaemonset = "k8s.daemonset";

        /// <summary>
        /// Prefix for 'k8s.job'.
        /// </summary>
        public static readonly string PrefixK8sJob = "k8s.job";

        /// <summary>
        /// Prefix for 'k8s.cronjob'.
        /// </summary>
        public static readonly string PrefixK8sCronjob = "k8s.cronjob";

        /// <summary>
        /// Prefix for 'os'.
        /// </summary>
        public static readonly string PrefixOs = "os";

        /// <summary>
        /// Prefix for 'process'.
        /// </summary>
        public static readonly string PrefixProcess = "process";

        /// <summary>
        /// Prefix for 'process.runtime'.
        /// </summary>
        public static readonly string PrefixProcessRuntime = "process.runtime";

        /// <summary>
        /// Prefix for 'service'.
        /// </summary>
        public static readonly string PrefixService = "service";

        /// <summary>
        /// Prefix for 'telemetry'.
        /// </summary>
        public static readonly string PrefixTelemetry = "telemetry";

        /// <summary>
        /// Prefix for 'webengine_resource'.
        /// </summary>
        public static readonly string PrefixWebengineResource = "webengine";

        /// <summary>
        /// Name of the cloud provider.
        /// </summary>
        public static class CloudProviderValues
        {
            /// <summary>
            /// Alibaba Cloud.
            /// </summary>
            public const string AlibabaCloud = "alibaba_cloud";

            /// <summary>
            /// Amazon Web Services.
            /// </summary>
            public const string Aws = "aws";

            /// <summary>
            /// Microsoft Azure.
            /// </summary>
            public const string Azure = "azure";

            /// <summary>
            /// Google Cloud Platform.
            /// </summary>
            public const string Gcp = "gcp";

            /// <summary>
            /// Tencent Cloud.
            /// </summary>
            public const string TencentCloud = "tencent_cloud";
        }

        /// <summary>
        /// The cloud platform in use.
        /// </summary>
        public static class CloudPlatformValues
        {
            /// <summary>
            /// Alibaba Cloud Elastic Compute Service.
            /// </summary>
            public const string AlibabaCloudEcs = "alibaba_cloud_ecs";

            /// <summary>
            /// Alibaba Cloud Function Compute.
            /// </summary>
            public const string AlibabaCloudFc = "alibaba_cloud_fc";

            /// <summary>
            /// AWS Elastic Compute Cloud.
            /// </summary>
            public const string AwsEc2 = "aws_ec2";

            /// <summary>
            /// AWS Elastic Container Service.
            /// </summary>
            public const string AwsEcs = "aws_ecs";

            /// <summary>
            /// AWS Elastic Kubernetes Service.
            /// </summary>
            public const string AwsEks = "aws_eks";

            /// <summary>
            /// AWS Lambda.
            /// </summary>
            public const string AwsLambda = "aws_lambda";

            /// <summary>
            /// AWS Elastic Beanstalk.
            /// </summary>
            public const string AwsElasticBeanstalk = "aws_elastic_beanstalk";

            /// <summary>
            /// AWS App Runner.
            /// </summary>
            public const string AwsAppRunner = "aws_app_runner";

            /// <summary>
            /// Azure Virtual Machines.
            /// </summary>
            public const string AzureVm = "azure_vm";

            /// <summary>
            /// Azure Container Instances.
            /// </summary>
            public const string AzureContainerInstances = "azure_container_instances";

            /// <summary>
            /// Azure Kubernetes Service.
            /// </summary>
            public const string AzureAks = "azure_aks";

            /// <summary>
            /// Azure Functions.
            /// </summary>
            public const string AzureFunctions = "azure_functions";

            /// <summary>
            /// Azure App Service.
            /// </summary>
            public const string AzureAppService = "azure_app_service";

            /// <summary>
            /// Google Cloud Compute Engine (GCE).
            /// </summary>
            public const string GcpComputeEngine = "gcp_compute_engine";

            /// <summary>
            /// Google Cloud Run.
            /// </summary>
            public const string GcpCloudRun = "gcp_cloud_run";

            /// <summary>
            /// Google Cloud Kubernetes Engine (GKE).
            /// </summary>
            public const string GcpKubernetesEngine = "gcp_kubernetes_engine";

            /// <summary>
            /// Google Cloud Functions (GCF).
            /// </summary>
            public const string GcpCloudFunctions = "gcp_cloud_functions";

            /// <summary>
            /// Google Cloud App Engine (GAE).
            /// </summary>
            public const string GcpAppEngine = "gcp_app_engine";

            /// <summary>
            /// Tencent Cloud Cloud Virtual Machine (CVM).
            /// </summary>
            public const string TencentCloudCvm = "tencent_cloud_cvm";

            /// <summary>
            /// Tencent Cloud Elastic Kubernetes Service (EKS).
            /// </summary>
            public const string TencentCloudEks = "tencent_cloud_eks";

            /// <summary>
            /// Tencent Cloud Serverless Cloud Function (SCF).
            /// </summary>
            public const string TencentCloudScf = "tencent_cloud_scf";
        }

        /// <summary>
        /// The <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html">launch type</a> for an ECS task.
        /// </summary>
        public static class AwsEcsLaunchtypeValues
        {
            /// <summary>
            /// ec2.
            /// </summary>
            public const string Ec2 = "ec2";

            /// <summary>
            /// fargate.
            /// </summary>
            public const string Fargate = "fargate";
        }

        /// <summary>
        /// The CPU architecture the host system is running on.
        /// </summary>
        public static class HostArchValues
        {
            /// <summary>
            /// AMD64.
            /// </summary>
            public const string Amd64 = "amd64";

            /// <summary>
            /// ARM32.
            /// </summary>
            public const string Arm32 = "arm32";

            /// <summary>
            /// ARM64.
            /// </summary>
            public const string Arm64 = "arm64";

            /// <summary>
            /// Itanium.
            /// </summary>
            public const string Ia64 = "ia64";

            /// <summary>
            /// 32-bit PowerPC.
            /// </summary>
            public const string Ppc32 = "ppc32";

            /// <summary>
            /// 64-bit PowerPC.
            /// </summary>
            public const string Ppc64 = "ppc64";

            /// <summary>
            /// IBM z/Architecture.
            /// </summary>
            public const string S390x = "s390x";

            /// <summary>
            /// 32-bit x86.
            /// </summary>
            public const string X86 = "x86";
        }

        /// <summary>
        /// The operating system type.
        /// </summary>
        public static class OsTypeValues
        {
            /// <summary>
            /// Microsoft Windows.
            /// </summary>
            public const string Windows = "windows";

            /// <summary>
            /// Linux.
            /// </summary>
            public const string Linux = "linux";

            /// <summary>
            /// Apple Darwin.
            /// </summary>
            public const string Darwin = "darwin";

            /// <summary>
            /// FreeBSD.
            /// </summary>
            public const string Freebsd = "freebsd";

            /// <summary>
            /// NetBSD.
            /// </summary>
            public const string Netbsd = "netbsd";

            /// <summary>
            /// OpenBSD.
            /// </summary>
            public const string Openbsd = "openbsd";

            /// <summary>
            /// DragonFly BSD.
            /// </summary>
            public const string Dragonflybsd = "dragonflybsd";

            /// <summary>
            /// HP-UX (Hewlett Packard Unix).
            /// </summary>
            public const string Hpux = "hpux";

            /// <summary>
            /// AIX (Advanced Interactive eXecutive).
            /// </summary>
            public const string Aix = "aix";

            /// <summary>
            /// SunOS, Oracle Solaris.
            /// </summary>
            public const string Solaris = "solaris";

            /// <summary>
            /// IBM z/OS.
            /// </summary>
            public const string ZOs = "z_os";
        }

        /// <summary>
        /// The language of the telemetry SDK.
        /// </summary>
        public static class TelemetrySdkLanguageValues
        {
            /// <summary>
            /// cpp.
            /// </summary>
            public const string Cpp = "cpp";

            /// <summary>
            /// dotnet.
            /// </summary>
            public const string Dotnet = "dotnet";

            /// <summary>
            /// erlang.
            /// </summary>
            public const string Erlang = "erlang";

            /// <summary>
            /// go.
            /// </summary>
            public const string Go = "go";

            /// <summary>
            /// java.
            /// </summary>
            public const string Java = "java";

            /// <summary>
            /// nodejs.
            /// </summary>
            public const string Nodejs = "nodejs";

            /// <summary>
            /// php.
            /// </summary>
            public const string Php = "php";

            /// <summary>
            /// python.
            /// </summary>
            public const string Python = "python";

            /// <summary>
            /// ruby.
            /// </summary>
            public const string Ruby = "ruby";

            /// <summary>
            /// webjs.
            /// </summary>
            public const string Webjs = "webjs";

            /// <summary>
            /// swift.
            /// </summary>
            public const string Swift = "swift";
        }
    }
}
