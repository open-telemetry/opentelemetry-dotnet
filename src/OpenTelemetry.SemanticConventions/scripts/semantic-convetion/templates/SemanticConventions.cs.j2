{%- macro print_value(type, value) -%}
  {{ "\"" if type == "string"}}{{value}}{{ "\"" if type == "string"}}
{%- endmacro %}

{%- macro formatRemarks(text) -%}
{%- set notes = ' '.join(text.splitlines()).encode('ascii', 'xmlcharrefreplace').decode() -%}
{{notes}}
{%- endmacro -%}

{%- macro formatXmlDoc(text) -%}
{%- set escaped = text.encode('ascii', 'xmlcharrefreplace').decode() -%}
  {%- if not escaped.endswith('.')-%}
    {{escaped + '.'}}
  {%- else -%}
    {{escaped}}
  {%- endif -%}
{%- endmacro -%}

// <copyright file="{{class}}.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

using System;

// <auto-generated> This file has been auto generated from buildscripts/semantic-convention{{template}}</auto-generated>
namespace {{pkg | trim}}
{
    /// <summary>
    /// Constants for semantic attribute names outlined by the OpenTelemetry specifications.
    /// <see href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/README.md"/>.
    /// </summary>
    /// <remarks>
    /// Schema and specification version: {{schemaUrl}}.
    /// </remarks>
    public static class {{class}}
    {
{%- for attribute in attributes if attribute.is_local and not attribute.ref %}
        /// <summary>
        /// {{formatXmlDoc(attribute.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
        /// </summary>
{%- if attribute.note %}
        /// <remarks>
        /// {{formatRemarks(attribute.note)}}
        /// </remarks>
{%- endif %}
{%- if attribute.deprecated %}
        [Obsolete("{{attribute.deprecated | to_doc_brief}}")]
{%- endif %}
        public const string Attribute{{attribute.fqn | to_camelcase(True)}} = "{{attribute.fqn}}";
{% endfor -%}

{%- if class == "TraceSemanticConventions" %}
        // Manually defined and not YET in the YAML
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
        public const string AttributeDbInstance = "db.instance";

        public const string AttributeExceptionEventName = "exception";
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
{%- endif -%}
{%- for attribute in attributes if attribute.is_local and not attribute.ref %}
{%- if attribute.is_enum %}
{%- set class_name = attribute.fqn | to_camelcase(True) ~ "Values" %}
{%- set type = attribute.attr_type.enum_type %}
        {%- if not loop.first -%} {{"\n"}} {%- endif %}
        /// <summary>
        /// {{formatXmlDoc(attribute.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
        /// </summary>
        public static class {{class_name}}
        {
            {%- for member in attribute.attr_type.members %}
            /// <summary>
            /// {{formatXmlDoc(member.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
            /// </summary>
            public const {{ type }} {{ member.member_id | to_camelcase(True) }} = {{ print_value(type, member.value) }};
            {%- if not loop.last -%} {{"\n"}} {%- endif %}
            {%- endfor %}
        }
{%- endif -%}
{%- endfor %}
    }
}

