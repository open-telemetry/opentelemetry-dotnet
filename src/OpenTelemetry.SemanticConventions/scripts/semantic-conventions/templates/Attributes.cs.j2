{%- macro print_value(type, value) -%}
  {{ "\"" if type == "string"}}{{value}}{{ "\"" if type == "string"}}
{%- endmacro %}

{%- macro format_remarks(text) -%}
{%- set notes = '\n        /// '.join(text.splitlines()).encode('ascii', 'xmlcharrefreplace').decode() -%}
{{notes}}
{%- endmacro -%}

{%- macro format_xml_doc(text) -%}
{%- set escaped = text.encode('ascii', 'xmlcharrefreplace').decode() -%}
  {%- if not escaped.endswith('.')-%}
    {{escaped + '.'}}
  {%- else -%}
    {{escaped}}
  {%- endif -%}
{%- endmacro -%}

{%- set filtered_attributes = attributes_and_templates | select(filter) | list %}
{%- if filtered_attributes | count > 0 %}
{%- set class_name = root_namespace | to_camelcase(True) ~ "Attributes" %}
// <copyright file="{{class_name}}.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions{{template}}</auto-generated>

using System;

namespace {{pkg | trim}}
{
    /// <summary>
    /// Describes semantic conventions for attributes in the <c>{{root_namespace}}</c> namespace.
    /// </summary>
    public static class {{class_name}}
    {
{%- for attribute in filtered_attributes %}

        /// <summary>
        /// {{format_xml_doc(attribute.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
        /// </summary>
  {% if attribute.note %}
        /// <remarks>
        /// {{format_remarks(attribute.note | to_doc_brief | escape | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}.
        /// </remarks>
  {% endif %}
  {% if attribute | is_deprecated %}
        [Obsolete("{{attribute.deprecated | to_doc_brief}}")]
  {% endif %}
  {% if attribute | is_template %}
        public const string {{attribute.fqn | to_camelcase(True)}}Template = "{{attribute.fqn}}";
  {% else %}
        public const string {{attribute.fqn | to_camelcase(True)}} = "{{attribute.fqn}}";
  {% endif %}
{% endfor %}
{%- for attribute in filtered_attributes %}
  {% if attribute.is_enum %}
  {% set class_name = attribute.fqn | to_camelcase(True) ~ "Values" %}
  {% set type = attribute.attr_type.enum_type %}

        /// <summary>
        /// {{format_xml_doc(attribute.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
        /// </summary>
        public static class {{class_name}}
        {
            {% for member in attribute.attr_type.members %}
            /// <summary>
            /// {{format_xml_doc(member.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
            /// </summary>
            public const {{ type }} {{ member.member_id | to_camelcase(True) }} = {{ print_value(type, member.value) }};
            {% endfor %}
        }
  {% endif %}
{% endfor %}
    }
}
{%- endif %}
