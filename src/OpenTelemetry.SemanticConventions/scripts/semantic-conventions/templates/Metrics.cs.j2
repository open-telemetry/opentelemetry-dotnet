{%- macro format_remarks(text) -%}
{%- set notes = '\n        /// '.join(text.splitlines()).encode('ascii', 'xmlcharrefreplace').decode() -%}
{{notes}}
{%- endmacro -%}

{%- macro format_xml_doc(text) -%}
{%- set escaped = text.encode('ascii', 'xmlcharrefreplace').decode() -%}
  {%- if not escaped.endswith('.')-%}
    {{escaped + '.'}}
  {%- else -%}
    {{escaped}}
  {%- endif -%}
{%- endmacro -%}
{%- macro to_dotnet_instrument_type(instrument) -%}
  {# value type is not supported yet - https://github.com/open-telemetry/semantic-conventions/issues/591 #}
  {# including only to demonstrate what's possible #}
  {%- if instrument == "counter" -%}
    Counter<long>
  {%- elif instrument == "histogram" -%}
    Histogram<double>
  {%- elif instrument == "updowncounter" -%}
    UpDownCounter<long>
  {%- elif instrument == "gauge" -%}
    ObservableGauge<double>
  {%- endif -%}
{%- endmacro %}
{%- macro to_dotnet_instrument_factory(instrument) -%}
  {%- if instrument == "counter" -%}
    CreateCounter<long>
  {%- elif instrument == "histogram" -%}
    CreateHistogram<double>
  {%- elif instrument == "updowncounter" -%}
    CreateUpDownCounter<long>
  {%- elif instrument == "gauge" -%}
    CreateObservableGauge<double>
  {%- endif -%}
{%- endmacro %}
{%- set filtered_metrics = metrics | select(filter) | list %}
{%- if filtered_metrics | count > 0 %}
{%- set class_name = root_namespace | to_camelcase(True) ~ "Metrics" %}
// <copyright file="{{class_name}}.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions{{template}}</auto-generated>

using System.Diagnostics.Metrics;

namespace {{pkg | trim}}
{
  /// <summary>
  /// Describes semantic conventions for metrics in the <c>{{root_namespace}}</c> namespace.
  /// </summary>
  public static class {{ class_name }} {
  {%- for metric in filtered_metrics %}

      /// <summary>
      /// Creates <c>{{metric.metric_name}}</c> instrument.
      /// {{format_xml_doc(metric.brief | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}
      /// </summary>
    {% if metric.note %}
      /// <remarks>
      /// {{format_remarks(metric.note | to_doc_brief | escape | render_markdown(code="<c>{0}</c>", paragraph="{0}"))}}.
      /// </remarks>
    {% endif %}
    {% if metric | is_deprecated %}
      [Obsolete("{{metric.deprecated | to_doc_brief}}")]
    {% endif %}
    {% if metric.instrument == "gauge" %}
      public static {{ to_dotnet_instrument_type(metric.instrument) }} Create{{metric.metric_name | to_camelcase(True)}}(Meter meter, Func<Measurement<double>> observe)
      {
          return meter.{{to_dotnet_instrument_factory(metric.instrument)}}("{{ metric.metric_name }}", observe, "{{ metric.unit }}", "{{ metric.brief }}");
      }
    {% else %}
      public static {{ to_dotnet_instrument_type(metric.instrument) }} Create{{metric.metric_name | to_camelcase(True)}}(Meter meter)
      {
          return meter.{{to_dotnet_instrument_factory(metric.instrument)}}("{{ metric.metric_name }}", "{{ metric.unit }}", "{{ metric.brief }}");
      }
    {% endif %}
  {% endfor %}
  }
}
{%endif%}