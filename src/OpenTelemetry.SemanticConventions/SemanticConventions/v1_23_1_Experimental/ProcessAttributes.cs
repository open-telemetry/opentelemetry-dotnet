// <copyright file="ProcessAttributes.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Attributes.cs.j2</auto-generated>

using System;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
    /// <summary>
    /// Describes semantic conventions for attributes in the <c>process</c> namespace.
    /// </summary>
    public static class ProcessAttributes
    {
        /// <summary>
        /// The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in <c>proc/[pid]/cmdline</c>. On Windows, can be set to the first parameter extracted from <c>GetCommandLineW</c>.
        /// </summary>
        public const string ProcessCommand = "process.command";

        /// <summary>
        /// All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from <c>proc/[pid]/cmdline</c>. For libc-based executables, this would be the full argv vector passed to <c>main</c>.
        /// </summary>
        public const string ProcessCommandArgs = "process.command_args";

        /// <summary>
        /// The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of <c>GetCommandLineW</c>. Do not set this if you have to assemble it just for monitoring; use <c>process.command_args</c> instead.
        /// </summary>
        public const string ProcessCommandLine = "process.command_line";

        /// <summary>
        /// The name of the process executable. On Linux based systems, can be set to the <c>Name</c> in <c>proc/[pid]/status</c>. On Windows, can be set to the base name of <c>GetProcessImageFileNameW</c>.
        /// </summary>
        public const string ProcessExecutableName = "process.executable.name";

        /// <summary>
        /// The full path to the process executable. On Linux based systems, can be set to the target of <c>proc/[pid]/exe</c>. On Windows, can be set to the result of <c>GetProcessImageFileNameW</c>.
        /// </summary>
        public const string ProcessExecutablePath = "process.executable.path";

        /// <summary>
        /// The username of the user that owns the process.
        /// </summary>
        public const string ProcessOwner = "process.owner";

        /// <summary>
        /// Parent Process identifier (PID).
        /// </summary>
        public const string ProcessParentPid = "process.parent_pid";

        /// <summary>
        /// Process identifier (PID).
        /// </summary>
        public const string ProcessPid = "process.pid";

        /// <summary>
        /// An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.
        /// </summary>
        public const string ProcessRuntimeDescription = "process.runtime.description";

        /// <summary>
        /// The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.
        /// </summary>
        public const string ProcessRuntimeName = "process.runtime.name";

        /// <summary>
        /// The version of the runtime of this process, as returned by the runtime without modification.
        /// </summary>
        public const string ProcessRuntimeVersion = "process.runtime.version";
    }
}