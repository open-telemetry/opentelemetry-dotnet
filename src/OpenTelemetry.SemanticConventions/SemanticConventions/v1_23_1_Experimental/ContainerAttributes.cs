// <copyright file="ContainerAttributes.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Attributes.cs.j2</auto-generated>

using System;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
    /// <summary>
    /// Describes semantic conventions for attributes in the <c>container</c> namespace.
    /// </summary>
    public static class ContainerAttributes
    {
        /// <summary>
        /// The command used to run the container (i.e. the command name).
        /// </summary>
        /// <remarks>
        /// If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.
        /// </remarks>
        public const string ContainerCommand = "container.command";

        /// <summary>
        /// All the command arguments (including the command/executable itself) run by the container. [2].
        /// </summary>
        public const string ContainerCommandArgs = "container.command_args";

        /// <summary>
        /// The full command run by the container as a single string representing the full command. [2].
        /// </summary>
        public const string ContainerCommandLine = "container.command_line";

        /// <summary>
        /// Container ID. Usually a UUID, as for example used to <a href="https://docs.docker.com/engine/reference/run/#container-identification">identify Docker containers</a>. The UUID might be abbreviated.
        /// </summary>
        public const string ContainerId = "container.id";

        /// <summary>
        /// Runtime specific image identifier. Usually a hash algorithm followed by a UUID.
        /// </summary>
        /// <remarks>
        /// Docker defines a sha256 of the image id; <c>container.image.id</c> corresponds to the <c>Image</c> field from the Docker container inspect <a href="https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect">API</a> endpoint.
        /// K8s defines a link to the container registry repository with digest <c>&#34;imageID&#34;: &#34;registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625&#34;</c>.
        /// The ID is assinged by the container runtime and can vary in different environments. Consider using <c>oci.manifest.digest</c> if it is important to identify the same image in different environments/runtimes.
        /// </remarks>
        public const string ContainerImageId = "container.image.id";

        /// <summary>
        /// Name of the image the container was built on.
        /// </summary>
        public const string ContainerImageName = "container.image.name";

        /// <summary>
        /// Repo digests of the container image as provided by the container runtime.
        /// </summary>
        /// <remarks>
        /// <a href="https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect">Docker</a> and <a href="https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238">CRI</a> report those under the <c>RepoDigests</c> field.
        /// </remarks>
        public const string ContainerImageRepoDigests = "container.image.repo_digests";

        /// <summary>
        /// Container image tags. An example can be found in <a href="https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect">Docker Image Inspect</a>. Should be only the <c><tag></c> section of the full name for example from <c>registry.example.com/my-org/my-image:<tag></c>.
        /// </summary>
        public const string ContainerImageTags = "container.image.tags";

        /// <summary>
        /// Container labels, <c><key></c> being the label name, the value being the label value.
        /// </summary>
        public const string ContainerLabelsTemplate = "container.labels";

        /// <summary>
        /// Container name used by container runtime.
        /// </summary>
        public const string ContainerName = "container.name";

        /// <summary>
        /// The container runtime managing this container.
        /// </summary>
        public const string ContainerRuntime = "container.runtime";
    }
}