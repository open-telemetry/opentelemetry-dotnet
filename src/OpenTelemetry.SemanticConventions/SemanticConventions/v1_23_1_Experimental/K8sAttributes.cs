// <copyright file="K8sAttributes.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Attributes.cs.j2</auto-generated>

using System;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
    /// <summary>
    /// Describes semantic conventions for attributes in the <c>k8s</c> namespace.
    /// </summary>
    public static class K8sAttributes
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        public const string K8sClusterName = "k8s.cluster.name";

        /// <summary>
        /// A pseudo-ID for the cluster, set to the UID of the <c>kube-system</c> namespace.
        /// </summary>
        /// <remarks>
        /// K8s doesn&amp;#39;t have support for obtaining a cluster ID. If this is ever
        /// added, we will recommend collecting the <c>k8s.cluster.uid</c> through the
        /// official APIs. In the meantime, we are able to use the <c>uid</c> of the
        /// <c>kube-system</c> namespace as a proxy for cluster ID. Read on for the
        /// rationale.Every object created in a K8s cluster is assigned a distinct UID. The
        /// <c>kube-system</c> namespace is used by Kubernetes itself and will exist
        /// for the lifetime of the cluster. Using the <c>uid</c> of the <c>kube-system</c>
        /// namespace is a reasonable proxy for the K8s ClusterID as it will only
        /// change if the cluster is rebuilt. Furthermore, Kubernetes UIDs are
        /// UUIDs as standardized by
        /// <a href="https://www.itu.int/ITU-T/studygroups/com17/oid.html">ISO/IEC 9834-8 and ITU-T X.667</a>.
        /// Which states:&amp;gt; If generated according to one of the mechanisms defined in Rec.
        ///   ITU-T X.667 | ISO/IEC 9834-8, a UUID is either guaranteed to be
        ///   different from all other UUIDs generated before 3603 A.D., or is
        ///   extremely likely to be different (depending on the mechanism chosen).Therefore, UIDs between clusters should be extremely unlikely to
        /// conflict.
        /// </remarks>
        public const string K8sClusterUid = "k8s.cluster.uid";

        /// <summary>
        /// The name of the Container from Pod specification, must be unique within a Pod. Container runtime usually uses different globally unique name (<c>container.name</c>).
        /// </summary>
        public const string K8sContainerName = "k8s.container.name";

        /// <summary>
        /// Number of times the container was restarted. This attribute can be used to identify a particular container (running or stopped) within a container spec.
        /// </summary>
        public const string K8sContainerRestartCount = "k8s.container.restart_count";

        /// <summary>
        /// The name of the CronJob.
        /// </summary>
        public const string K8sCronjobName = "k8s.cronjob.name";

        /// <summary>
        /// The UID of the CronJob.
        /// </summary>
        public const string K8sCronjobUid = "k8s.cronjob.uid";

        /// <summary>
        /// The name of the DaemonSet.
        /// </summary>
        public const string K8sDaemonsetName = "k8s.daemonset.name";

        /// <summary>
        /// The UID of the DaemonSet.
        /// </summary>
        public const string K8sDaemonsetUid = "k8s.daemonset.uid";

        /// <summary>
        /// The name of the Deployment.
        /// </summary>
        public const string K8sDeploymentName = "k8s.deployment.name";

        /// <summary>
        /// The UID of the Deployment.
        /// </summary>
        public const string K8sDeploymentUid = "k8s.deployment.uid";

        /// <summary>
        /// The name of the Job.
        /// </summary>
        public const string K8sJobName = "k8s.job.name";

        /// <summary>
        /// The UID of the Job.
        /// </summary>
        public const string K8sJobUid = "k8s.job.uid";

        /// <summary>
        /// The name of the namespace that the pod is running in.
        /// </summary>
        public const string K8sNamespaceName = "k8s.namespace.name";

        /// <summary>
        /// The name of the Node.
        /// </summary>
        public const string K8sNodeName = "k8s.node.name";

        /// <summary>
        /// The UID of the Node.
        /// </summary>
        public const string K8sNodeUid = "k8s.node.uid";

        /// <summary>
        /// The name of the Pod.
        /// </summary>
        public const string K8sPodName = "k8s.pod.name";

        /// <summary>
        /// The UID of the Pod.
        /// </summary>
        public const string K8sPodUid = "k8s.pod.uid";

        /// <summary>
        /// The name of the ReplicaSet.
        /// </summary>
        public const string K8sReplicasetName = "k8s.replicaset.name";

        /// <summary>
        /// The UID of the ReplicaSet.
        /// </summary>
        public const string K8sReplicasetUid = "k8s.replicaset.uid";

        /// <summary>
        /// The name of the StatefulSet.
        /// </summary>
        public const string K8sStatefulsetName = "k8s.statefulset.name";

        /// <summary>
        /// The UID of the StatefulSet.
        /// </summary>
        public const string K8sStatefulsetUid = "k8s.statefulset.uid";
    }
}