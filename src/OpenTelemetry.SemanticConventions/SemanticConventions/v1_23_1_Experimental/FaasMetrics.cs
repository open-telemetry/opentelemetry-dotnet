// <copyright file="FaasMetrics.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Metrics.cs.j2</auto-generated>

using System.Diagnostics.Metrics;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
  /// <summary>
  /// Describes semantic conventions for metrics in the <c>faas</c> namespace.
  /// </summary>
  public static class FaasMetrics {
      /// <summary>
      /// Creates <c>faas.coldstarts</c> instrument.
      /// Number of invocation cold starts.
      /// </summary>
      public static Counter<long> CreateFaasColdstarts(Meter meter)
      {
          return meter.CreateCounter<long>("faas.coldstarts", "{coldstart}", "Number of invocation cold starts");
      }

      /// <summary>
      /// Creates <c>faas.cpu_usage</c> instrument.
      /// Distribution of CPU usage per invocation.
      /// </summary>
      public static Histogram<double> CreateFaasCpuUsage(Meter meter)
      {
          return meter.CreateHistogram<double>("faas.cpu_usage", "s", "Distribution of CPU usage per invocation");
      }

      /// <summary>
      /// Creates <c>faas.errors</c> instrument.
      /// Number of invocation errors.
      /// </summary>
      public static Counter<long> CreateFaasErrors(Meter meter)
      {
          return meter.CreateCounter<long>("faas.errors", "{error}", "Number of invocation errors");
      }

      /// <summary>
      /// Creates <c>faas.init_duration</c> instrument.
      /// Measures the duration of the function's initialization, such as a cold start.
      /// </summary>
      public static Histogram<double> CreateFaasInitDuration(Meter meter)
      {
          return meter.CreateHistogram<double>("faas.init_duration", "s", "Measures the duration of the function's initialization, such as a cold start");
      }

      /// <summary>
      /// Creates <c>faas.invocations</c> instrument.
      /// Number of successful invocations.
      /// </summary>
      public static Counter<long> CreateFaasInvocations(Meter meter)
      {
          return meter.CreateCounter<long>("faas.invocations", "{invocation}", "Number of successful invocations");
      }

      /// <summary>
      /// Creates <c>faas.invoke_duration</c> instrument.
      /// Measures the duration of the function's logic execution.
      /// </summary>
      public static Histogram<double> CreateFaasInvokeDuration(Meter meter)
      {
          return meter.CreateHistogram<double>("faas.invoke_duration", "s", "Measures the duration of the function's logic execution");
      }

      /// <summary>
      /// Creates <c>faas.mem_usage</c> instrument.
      /// Distribution of max memory usage per invocation.
      /// </summary>
      public static Histogram<double> CreateFaasMemUsage(Meter meter)
      {
          return meter.CreateHistogram<double>("faas.mem_usage", "By", "Distribution of max memory usage per invocation");
      }

      /// <summary>
      /// Creates <c>faas.net_io</c> instrument.
      /// Distribution of net I/O usage per invocation.
      /// </summary>
      public static Histogram<double> CreateFaasNetIo(Meter meter)
      {
          return meter.CreateHistogram<double>("faas.net_io", "By", "Distribution of net I/O usage per invocation");
      }

      /// <summary>
      /// Creates <c>faas.timeouts</c> instrument.
      /// Number of invocation timeouts.
      /// </summary>
      public static Counter<long> CreateFaasTimeouts(Meter meter)
      {
          return meter.CreateCounter<long>("faas.timeouts", "{timeout}", "Number of invocation timeouts");
      }
  }
}
