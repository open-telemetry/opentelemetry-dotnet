// <copyright file="RpcMetrics.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Metrics.cs.j2</auto-generated>

using System.Diagnostics.Metrics;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
  /// <summary>
  /// Describes semantic conventions for metrics in the <c>rpc</c> namespace.
  /// </summary>
  public static class RpcMetrics {
      /// <summary>
      /// Creates <c>rpc.client.duration</c> instrument.
      /// Measures the duration of outbound RPC.
      /// </summary>
      /// <remarks>
      /// While streaming RPCs may record this metric as start-of-batch
        /// to end-of-batch, it&amp;#39;s hard to interpret in practice.<strong>Streaming</strong>: N/A.
      /// </remarks>
      public static Histogram<double> CreateRpcClientDuration(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.client.duration", "ms", "Measures the duration of outbound RPC.");
      }

      /// <summary>
      /// Creates <c>rpc.client.request.size</c> instrument.
      /// Measures the size of RPC request messages (uncompressed).
      /// </summary>
      /// <remarks>
      /// <strong>Streaming</strong>: Recorded per message in a streaming batch.
      /// </remarks>
      public static Histogram<double> CreateRpcClientRequestSize(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.client.request.size", "By", "Measures the size of RPC request messages (uncompressed).");
      }

      /// <summary>
      /// Creates <c>rpc.client.requests_per_rpc</c> instrument.
      /// Measures the number of messages received per RPC.
      /// </summary>
      /// <remarks>
      /// Should be 1 for all non-streaming RPCs.<strong>Streaming</strong>: This metric is required for server and client streaming RPCs.
      /// </remarks>
      public static Histogram<double> CreateRpcClientRequestsPerRpc(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.client.requests_per_rpc", "{count}", "Measures the number of messages received per RPC.");
      }

      /// <summary>
      /// Creates <c>rpc.client.response.size</c> instrument.
      /// Measures the size of RPC response messages (uncompressed).
      /// </summary>
      /// <remarks>
      /// <strong>Streaming</strong>: Recorded per response in a streaming batch.
      /// </remarks>
      public static Histogram<double> CreateRpcClientResponseSize(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.client.response.size", "By", "Measures the size of RPC response messages (uncompressed).");
      }

      /// <summary>
      /// Creates <c>rpc.client.responses_per_rpc</c> instrument.
      /// Measures the number of messages sent per RPC.
      /// </summary>
      /// <remarks>
      /// Should be 1 for all non-streaming RPCs.<strong>Streaming</strong>: This metric is required for server and client streaming RPCs.
      /// </remarks>
      public static Histogram<double> CreateRpcClientResponsesPerRpc(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.client.responses_per_rpc", "{count}", "Measures the number of messages sent per RPC.");
      }

      /// <summary>
      /// Creates <c>rpc.server.duration</c> instrument.
      /// Measures the duration of inbound RPC.
      /// </summary>
      /// <remarks>
      /// While streaming RPCs may record this metric as start-of-batch
        /// to end-of-batch, it&amp;#39;s hard to interpret in practice.<strong>Streaming</strong>: N/A.
      /// </remarks>
      public static Histogram<double> CreateRpcServerDuration(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.server.duration", "ms", "Measures the duration of inbound RPC.");
      }

      /// <summary>
      /// Creates <c>rpc.server.request.size</c> instrument.
      /// Measures the size of RPC request messages (uncompressed).
      /// </summary>
      /// <remarks>
      /// <strong>Streaming</strong>: Recorded per message in a streaming batch.
      /// </remarks>
      public static Histogram<double> CreateRpcServerRequestSize(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.server.request.size", "By", "Measures the size of RPC request messages (uncompressed).");
      }

      /// <summary>
      /// Creates <c>rpc.server.requests_per_rpc</c> instrument.
      /// Measures the number of messages received per RPC.
      /// </summary>
      /// <remarks>
      /// Should be 1 for all non-streaming RPCs.<strong>Streaming</strong> : This metric is required for server and client streaming RPCs.
      /// </remarks>
      public static Histogram<double> CreateRpcServerRequestsPerRpc(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.server.requests_per_rpc", "{count}", "Measures the number of messages received per RPC.");
      }

      /// <summary>
      /// Creates <c>rpc.server.response.size</c> instrument.
      /// Measures the size of RPC response messages (uncompressed).
      /// </summary>
      /// <remarks>
      /// <strong>Streaming</strong>: Recorded per response in a streaming batch.
      /// </remarks>
      public static Histogram<double> CreateRpcServerResponseSize(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.server.response.size", "By", "Measures the size of RPC response messages (uncompressed).");
      }

      /// <summary>
      /// Creates <c>rpc.server.responses_per_rpc</c> instrument.
      /// Measures the number of messages sent per RPC.
      /// </summary>
      /// <remarks>
      /// Should be 1 for all non-streaming RPCs.<strong>Streaming</strong>: This metric is required for server and client streaming RPCs.
      /// </remarks>
      public static Histogram<double> CreateRpcServerResponsesPerRpc(Meter meter)
      {
          return meter.CreateHistogram<double>("rpc.server.responses_per_rpc", "{count}", "Measures the number of messages sent per RPC.");
      }
  }
}
