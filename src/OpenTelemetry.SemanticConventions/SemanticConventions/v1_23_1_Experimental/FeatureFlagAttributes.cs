// <copyright file="FeatureFlagAttributes.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Attributes.cs.j2</auto-generated>

using System;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
    /// <summary>
    /// Describes semantic conventions for attributes in the <c>feature_flag</c> namespace.
    /// </summary>
    public static class FeatureFlagAttributes
    {
        /// <summary>
        /// The unique identifier of the feature flag.
        /// </summary>
        public const string FeatureFlagKey = "feature_flag.key";

        /// <summary>
        /// The name of the service provider that performs the flag evaluation.
        /// </summary>
        public const string FeatureFlagProviderName = "feature_flag.provider_name";

        /// <summary>
        /// SHOULD be a semantic identifier for a value. If one is unavailable, a stringified version of the value can be used.
        /// </summary>
        /// <remarks>
        /// A semantic identifier, commonly referred to as a variant, provides a means
        /// for referring to a value without including the value itself. This can
        /// provide additional context for understanding the meaning behind a value.
        /// For example, the variant <c>red</c> maybe be used for the value <c>#c05543</c>.A stringified version of the value can be used in situations where a
        /// semantic identifier is unavailable. String representation of the value
        /// should be determined by the implementer.
        /// </remarks>
        public const string FeatureFlagVariant = "feature_flag.variant";
    }
}