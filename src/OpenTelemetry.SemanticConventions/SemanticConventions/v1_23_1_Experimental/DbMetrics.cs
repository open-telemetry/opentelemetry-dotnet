// <copyright file="DbMetrics.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Metrics.cs.j2</auto-generated>

using System.Diagnostics.Metrics;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
  /// <summary>
  /// Describes semantic conventions for metrics in the <c>db</c> namespace.
  /// </summary>
  public static class DbMetrics {
      /// <summary>
      /// Creates <c>db.client.connections.create_time</c> instrument.
      /// The time it took to create a new connection.
      /// </summary>
      public static Histogram<double> CreateDbClientConnectionsCreateTime(Meter meter)
      {
          return meter.CreateHistogram<double>("db.client.connections.create_time", "ms", "The time it took to create a new connection");
      }

      /// <summary>
      /// Creates <c>db.client.connections.idle.max</c> instrument.
      /// The maximum number of idle open connections allowed.
      /// </summary>
      public static UpDownCounter<long> CreateDbClientConnectionsIdleMax(Meter meter)
      {
          return meter.CreateUpDownCounter<long>("db.client.connections.idle.max", "{connection}", "The maximum number of idle open connections allowed");
      }

      /// <summary>
      /// Creates <c>db.client.connections.idle.min</c> instrument.
      /// The minimum number of idle open connections allowed.
      /// </summary>
      public static UpDownCounter<long> CreateDbClientConnectionsIdleMin(Meter meter)
      {
          return meter.CreateUpDownCounter<long>("db.client.connections.idle.min", "{connection}", "The minimum number of idle open connections allowed");
      }

      /// <summary>
      /// Creates <c>db.client.connections.max</c> instrument.
      /// The maximum number of open connections allowed.
      /// </summary>
      public static UpDownCounter<long> CreateDbClientConnectionsMax(Meter meter)
      {
          return meter.CreateUpDownCounter<long>("db.client.connections.max", "{connection}", "The maximum number of open connections allowed");
      }

      /// <summary>
      /// Creates <c>db.client.connections.pending_requests</c> instrument.
      /// The number of pending requests for an open connection, cumulative for the entire pool.
      /// </summary>
      public static UpDownCounter<long> CreateDbClientConnectionsPendingRequests(Meter meter)
      {
          return meter.CreateUpDownCounter<long>("db.client.connections.pending_requests", "{request}", "The number of pending requests for an open connection, cumulative for the entire pool");
      }

      /// <summary>
      /// Creates <c>db.client.connections.timeouts</c> instrument.
      /// The number of connection timeouts that have occurred trying to obtain a connection from the pool.
      /// </summary>
      public static Counter<long> CreateDbClientConnectionsTimeouts(Meter meter)
      {
          return meter.CreateCounter<long>("db.client.connections.timeouts", "{timeout}", "The number of connection timeouts that have occurred trying to obtain a connection from the pool");
      }

      /// <summary>
      /// Creates <c>db.client.connections.usage</c> instrument.
      /// The number of connections that are currently in state described by the <c>state</c> attribute.
      /// </summary>
      public static UpDownCounter<long> CreateDbClientConnectionsUsage(Meter meter)
      {
          return meter.CreateUpDownCounter<long>("db.client.connections.usage", "{connection}", "The number of connections that are currently in state described by the `state` attribute");
      }

      /// <summary>
      /// Creates <c>db.client.connections.use_time</c> instrument.
      /// The time between borrowing a connection and returning it to the pool.
      /// </summary>
      public static Histogram<double> CreateDbClientConnectionsUseTime(Meter meter)
      {
          return meter.CreateHistogram<double>("db.client.connections.use_time", "ms", "The time between borrowing a connection and returning it to the pool");
      }

      /// <summary>
      /// Creates <c>db.client.connections.wait_time</c> instrument.
      /// The time it took to obtain an open connection from the pool.
      /// </summary>
      public static Histogram<double> CreateDbClientConnectionsWaitTime(Meter meter)
      {
          return meter.CreateHistogram<double>("db.client.connections.wait_time", "ms", "The time it took to obtain an open connection from the pool");
      }
  }
}
