// <copyright file="JvmAttributes.cs" company="OpenTelemetry Authors">
// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

// <auto-generated> This file has been auto generated from buildscripts/semantic-conventions/templates/Attributes.cs.j2</auto-generated>

using System;

namespace OpenTelemetry.SemanticConventions.v1_23_1_Experimental
{
    /// <summary>
    /// Describes semantic conventions for attributes in the <c>jvm</c> namespace.
    /// </summary>
    public static class JvmAttributes
    {
        /// <summary>
        /// Name of the buffer pool.
        /// </summary>
        /// <remarks>
        /// Pool names are generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/BufferPoolMXBean.html#getName()">BufferPoolMXBean#getName()</a>.
        /// </remarks>
        public const string JvmBufferPoolName = "jvm.buffer.pool.name";

        /// <summary>
        /// Name of the garbage collector action.
        /// </summary>
        /// <remarks>
        /// Garbage collector action is generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()">GarbageCollectionNotificationInfo#getGcAction()</a>.
        /// </remarks>
        public const string JvmGcAction = "jvm.gc.action";

        /// <summary>
        /// Name of the garbage collector.
        /// </summary>
        /// <remarks>
        /// Garbage collector name is generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()">GarbageCollectionNotificationInfo#getGcName()</a>.
        /// </remarks>
        public const string JvmGcName = "jvm.gc.name";

        /// <summary>
        /// Name of the memory pool.
        /// </summary>
        /// <remarks>
        /// Pool names are generally obtained via <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()">MemoryPoolMXBean#getName()</a>.
        /// </remarks>
        public const string JvmMemoryPoolName = "jvm.memory.pool.name";

        /// <summary>
        /// The type of memory.
        /// </summary>
        public const string JvmMemoryType = "jvm.memory.type";

        /// <summary>
        /// Whether the thread is daemon or not.
        /// </summary>
        public const string JvmThreadDaemon = "jvm.thread.daemon";

        /// <summary>
        /// State of the thread.
        /// </summary>
        public const string JvmThreadState = "jvm.thread.state";

        /// <summary>
        /// The type of memory.
        /// </summary>
        public static class JvmMemoryTypeValues
        {
            /// <summary>
            /// Heap memory.
            /// </summary>
            public const string Heap = "heap";
            /// <summary>
            /// Non-heap memory.
            /// </summary>
            public const string NonHeap = "non_heap";
        }

        /// <summary>
        /// State of the thread.
        /// </summary>
        public static class JvmThreadStateValues
        {
            /// <summary>
            /// A thread that has not yet started is in this state.
            /// </summary>
            public const string New = "new";
            /// <summary>
            /// A thread executing in the Java virtual machine is in this state.
            /// </summary>
            public const string Runnable = "runnable";
            /// <summary>
            /// A thread that is blocked waiting for a monitor lock is in this state.
            /// </summary>
            public const string Blocked = "blocked";
            /// <summary>
            /// A thread that is waiting indefinitely for another thread to perform a particular action is in this state.
            /// </summary>
            public const string Waiting = "waiting";
            /// <summary>
            /// A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.
            /// </summary>
            public const string TimedWaiting = "timed_waiting";
            /// <summary>
            /// A thread that has exited is in this state.
            /// </summary>
            public const string Terminated = "terminated";
        }
    }
}