// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: agent/trace/v1/trace_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenTelemetry.Proto.Agent.Trace.V1 {

  /// <summary>Holder for reflection information generated from agent/trace/v1/trace_service.proto</summary>
  public static partial class TraceServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for agent/trace/v1/trace_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TraceServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJhZ2VudC90cmFjZS92MS90cmFjZV9zZXJ2aWNlLnByb3RvEh9vcGVuY2Vu",
            "c3VzLnByb3RvLmFnZW50LnRyYWNlLnYxGi1vcGVuY2Vuc3VzL3Byb3RvL2Fn",
            "ZW50L2NvbW1vbi92MS9jb21tb24ucHJvdG8aK29wZW5jZW5zdXMvcHJvdG8v",
            "cmVzb3VyY2UvdjEvcmVzb3VyY2UucHJvdG8aJW9wZW5jZW5zdXMvcHJvdG8v",
            "dHJhY2UvdjEvdHJhY2UucHJvdG8aLG9wZW5jZW5zdXMvcHJvdG8vdHJhY2Uv",
            "djEvdHJhY2VfY29uZmlnLnByb3RvIoQBChRDdXJyZW50TGlicmFyeUNvbmZp",
            "ZxI0CgRub2RlGAEgASgLMiYub3BlbmNlbnN1cy5wcm90by5hZ2VudC5jb21t",
            "b24udjEuTm9kZRI2CgZjb25maWcYAiABKAsyJi5vcGVuY2Vuc3VzLnByb3Rv",
            "LnRyYWNlLnYxLlRyYWNlQ29uZmlnIoQBChRVcGRhdGVkTGlicmFyeUNvbmZp",
            "ZxI0CgRub2RlGAEgASgLMiYub3BlbmNlbnN1cy5wcm90by5hZ2VudC5jb21t",
            "b24udjEuTm9kZRI2CgZjb25maWcYAiABKAsyJi5vcGVuY2Vuc3VzLnByb3Rv",
            "LnRyYWNlLnYxLlRyYWNlQ29uZmlnIrsBChlFeHBvcnRUcmFjZVNlcnZpY2VS",
            "ZXF1ZXN0EjQKBG5vZGUYASABKAsyJi5vcGVuY2Vuc3VzLnByb3RvLmFnZW50",
            "LmNvbW1vbi52MS5Ob2RlEi4KBXNwYW5zGAIgAygLMh8ub3BlbmNlbnN1cy5w",
            "cm90by50cmFjZS52MS5TcGFuEjgKCHJlc291cmNlGAMgASgLMiYub3BlbmNl",
            "bnN1cy5wcm90by5yZXNvdXJjZS52MS5SZXNvdXJjZSIcChpFeHBvcnRUcmFj",
            "ZVNlcnZpY2VSZXNwb25zZTKWAgoMVHJhY2VTZXJ2aWNlEnwKBkNvbmZpZxI1",
            "Lm9wZW5jZW5zdXMucHJvdG8uYWdlbnQudHJhY2UudjEuQ3VycmVudExpYnJh",
            "cnlDb25maWcaNS5vcGVuY2Vuc3VzLnByb3RvLmFnZW50LnRyYWNlLnYxLlVw",
            "ZGF0ZWRMaWJyYXJ5Q29uZmlnIgAoATABEocBCgZFeHBvcnQSOi5vcGVuY2Vu",
            "c3VzLnByb3RvLmFnZW50LnRyYWNlLnYxLkV4cG9ydFRyYWNlU2VydmljZVJl",
            "cXVlc3QaOy5vcGVuY2Vuc3VzLnByb3RvLmFnZW50LnRyYWNlLnYxLkV4cG9y",
            "dFRyYWNlU2VydmljZVJlc3BvbnNlIgAoATABQoMBCiJpby5vcGVuY2Vuc3Vz",
            "LnByb3RvLmFnZW50LnRyYWNlLnYxQhFUcmFjZVNlcnZpY2VQcm90b1ABWkhn",
            "aXRodWIuY29tL2NlbnN1cy1pbnN0cnVtZW50YXRpb24vb3BlbmNlbnN1cy1w",
            "cm90by9nZW4tZ28vYWdlbnQvdHJhY2UvdjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::OpenTelemetry.Proto.Agent.Common.V1.CommonReflection.Descriptor, global::OpenTelemetry.Proto.Resource.V1.ResourceReflection.Descriptor, global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor, global::OpenTelemetry.Proto.Trace.V1.TraceConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig), global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig.Parser, new[]{ "Node", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig), global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig.Parser, new[]{ "Node", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest), global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest.Parser, new[]{ "Node", "Spans", "Resource" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse), global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CurrentLibraryConfig : pb::IMessage<CurrentLibraryConfig> {
    private static readonly pb::MessageParser<CurrentLibraryConfig> _parser = new pb::MessageParser<CurrentLibraryConfig>(() => new CurrentLibraryConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentLibraryConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Trace.V1.TraceServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentLibraryConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentLibraryConfig(CurrentLibraryConfig other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentLibraryConfig Clone() {
      return new CurrentLibraryConfig(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::OpenTelemetry.Proto.Agent.Common.V1.Node node_;
    /// <summary>
    /// This is required only in the first message on the stream or if the
    /// previous sent CurrentLibraryConfig message has a different Node (e.g.
    /// when the same RPC is used to configure multiple Applications).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::OpenTelemetry.Proto.Trace.V1.TraceConfig config_;
    /// <summary>
    /// Current configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.TraceConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentLibraryConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentLibraryConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentLibraryConfig other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::OpenTelemetry.Proto.Agent.Common.V1.Node();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::OpenTelemetry.Proto.Trace.V1.TraceConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::OpenTelemetry.Proto.Agent.Common.V1.Node();
            }
            input.ReadMessage(node_);
            break;
          }
          case 18: {
            if (config_ == null) {
              config_ = new global::OpenTelemetry.Proto.Trace.V1.TraceConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatedLibraryConfig : pb::IMessage<UpdatedLibraryConfig> {
    private static readonly pb::MessageParser<UpdatedLibraryConfig> _parser = new pb::MessageParser<UpdatedLibraryConfig>(() => new UpdatedLibraryConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatedLibraryConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Trace.V1.TraceServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatedLibraryConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatedLibraryConfig(UpdatedLibraryConfig other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatedLibraryConfig Clone() {
      return new UpdatedLibraryConfig(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::OpenTelemetry.Proto.Agent.Common.V1.Node node_;
    /// <summary>
    /// This field is ignored when the RPC is used to configure only one Application.
    /// This is required only in the first message on the stream or if the
    /// previous sent UpdatedLibraryConfig message has a different Node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::OpenTelemetry.Proto.Trace.V1.TraceConfig config_;
    /// <summary>
    /// Requested updated configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.TraceConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatedLibraryConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatedLibraryConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatedLibraryConfig other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::OpenTelemetry.Proto.Agent.Common.V1.Node();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::OpenTelemetry.Proto.Trace.V1.TraceConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::OpenTelemetry.Proto.Agent.Common.V1.Node();
            }
            input.ReadMessage(node_);
            break;
          }
          case 18: {
            if (config_ == null) {
              config_ = new global::OpenTelemetry.Proto.Trace.V1.TraceConfig();
            }
            input.ReadMessage(config_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExportTraceServiceRequest : pb::IMessage<ExportTraceServiceRequest> {
    private static readonly pb::MessageParser<ExportTraceServiceRequest> _parser = new pb::MessageParser<ExportTraceServiceRequest>(() => new ExportTraceServiceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportTraceServiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Trace.V1.TraceServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTraceServiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTraceServiceRequest(ExportTraceServiceRequest other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      spans_ = other.spans_.Clone();
      resource_ = other.resource_ != null ? other.resource_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTraceServiceRequest Clone() {
      return new ExportTraceServiceRequest(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::OpenTelemetry.Proto.Agent.Common.V1.Node node_;
    /// <summary>
    /// This is required only in the first message on the stream or if the
    /// previous sent ExportTraceServiceRequest message has a different Node (e.g.
    /// when the same RPC is used to send Spans from multiple Applications).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.Node Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::OpenTelemetry.Proto.Trace.V1.Span> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(18, global::OpenTelemetry.Proto.Trace.V1.Span.Parser);
    private readonly pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span> spans_ = new pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span>();
    /// <summary>
    /// A list of Spans that belong to the last received Node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 3;
    private global::OpenTelemetry.Proto.Resource.V1.Resource resource_;
    /// <summary>
    /// The resource for the spans in this message that do not have an explicit
    /// resource set.
    /// If unset, the most recently set resource in the RPC stream applies. It is
    /// valid to never be set within a stream, e.g. when no resource info is known.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Resource.V1.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportTraceServiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportTraceServiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if(!spans_.Equals(other.spans_)) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      hash ^= spans_.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      spans_.WriteTo(output, _repeated_spans_codec);
      if (resource_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Resource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportTraceServiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          node_ = new global::OpenTelemetry.Proto.Agent.Common.V1.Node();
        }
        Node.MergeFrom(other.Node);
      }
      spans_.Add(other.spans_);
      if (other.resource_ != null) {
        if (resource_ == null) {
          resource_ = new global::OpenTelemetry.Proto.Resource.V1.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              node_ = new global::OpenTelemetry.Proto.Agent.Common.V1.Node();
            }
            input.ReadMessage(node_);
            break;
          }
          case 18: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 26: {
            if (resource_ == null) {
              resource_ = new global::OpenTelemetry.Proto.Resource.V1.Resource();
            }
            input.ReadMessage(resource_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExportTraceServiceResponse : pb::IMessage<ExportTraceServiceResponse> {
    private static readonly pb::MessageParser<ExportTraceServiceResponse> _parser = new pb::MessageParser<ExportTraceServiceResponse>(() => new ExportTraceServiceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportTraceServiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Trace.V1.TraceServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTraceServiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTraceServiceResponse(ExportTraceServiceResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportTraceServiceResponse Clone() {
      return new ExportTraceServiceResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportTraceServiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportTraceServiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportTraceServiceResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
