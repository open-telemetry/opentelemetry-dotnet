// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: agent/trace/v1/trace_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2018, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace OpenTelemetry.Proto.Agent.Trace.V1 {
  /// <summary>
  /// Service that can be used to push spans and configs between one Application
  /// instrumented with OpenTelemetry and an agent, or between an agent and a
  /// central collector or config service (in this case spans and configs are
  /// sent/received to/from multiple Applications).
  /// </summary>
  public static partial class TraceService
  {
    static readonly string __ServiceName = "OpenTelemetry.proto.agent.trace.v1.TraceService";

    static readonly grpc::Marshaller<global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig> __Marshaller_OpenTelemetry_proto_agent_trace_v1_CurrentLibraryConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig> __Marshaller_OpenTelemetry_proto_agent_trace_v1_UpdatedLibraryConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest> __Marshaller_OpenTelemetry_proto_agent_trace_v1_ExportTraceServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse> __Marshaller_OpenTelemetry_proto_agent_trace_v1_ExportTraceServiceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig, global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig> __Method_Config = new grpc::Method<global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig, global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Config",
        __Marshaller_OpenTelemetry_proto_agent_trace_v1_CurrentLibraryConfig,
        __Marshaller_OpenTelemetry_proto_agent_trace_v1_UpdatedLibraryConfig);

    static readonly grpc::Method<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest, global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse> __Method_Export = new grpc::Method<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest, global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Export",
        __Marshaller_OpenTelemetry_proto_agent_trace_v1_ExportTraceServiceRequest,
        __Marshaller_OpenTelemetry_proto_agent_trace_v1_ExportTraceServiceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::OpenTelemetry.Proto.Agent.Trace.V1.TraceServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TraceService</summary>
    public abstract partial class TraceServiceBase
    {
      /// <summary>
      /// After initialization, this RPC must be kept alive for the entire life of
      /// the application. The agent pushes configs down to applications via a
      /// stream.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Config(grpc::IAsyncStreamReader<global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig> requestStream, grpc::IServerStreamWriter<global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// For performance reasons, it is recommended to keep this RPC
      /// alive for the entire life of the application.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task Export(grpc::IAsyncStreamReader<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest> requestStream, grpc::IServerStreamWriter<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TraceService</summary>
    public partial class TraceServiceClient : grpc::ClientBase<TraceServiceClient>
    {
      /// <summary>Creates a new client for TraceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TraceServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TraceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TraceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TraceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TraceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// After initialization, this RPC must be kept alive for the entire life of
      /// the application. The agent pushes configs down to applications via a
      /// stream.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig, global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig> Config(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Config(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// After initialization, this RPC must be kept alive for the entire life of
      /// the application. The agent pushes configs down to applications via a
      /// stream.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::OpenTelemetry.Proto.Agent.Trace.V1.CurrentLibraryConfig, global::OpenTelemetry.Proto.Agent.Trace.V1.UpdatedLibraryConfig> Config(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Config, null, options);
      }
      /// <summary>
      /// For performance reasons, it is recommended to keep this RPC
      /// alive for the entire life of the application.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest, global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse> Export(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Export(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// For performance reasons, it is recommended to keep this RPC
      /// alive for the entire life of the application.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceRequest, global::OpenTelemetry.Proto.Agent.Trace.V1.ExportTraceServiceResponse> Export(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Export, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TraceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TraceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TraceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Config, serviceImpl.Config)
          .AddMethod(__Method_Export, serviceImpl.Export).Build();
    }

  }
}
#endregion
