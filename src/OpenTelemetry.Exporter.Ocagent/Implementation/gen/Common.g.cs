// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: agent/common/v1/common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenTelemetry.Proto.Agent.Common.V1 {

  /// <summary>Holder for reflection information generated from agent/common/v1/common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for agent/common/v1/common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxhZ2VudC9jb21tb24vdjEvY29tbW9uLnByb3RvEiBvcGVuY2Vuc3VzLnBy",
            "b3RvLmFnZW50LmNvbW1vbi52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFt",
            "cC5wcm90byLYAgoETm9kZRJHCgppZGVudGlmaWVyGAEgASgLMjMub3BlbmNl",
            "bnN1cy5wcm90by5hZ2VudC5jb21tb24udjEuUHJvY2Vzc0lkZW50aWZpZXIS",
            "QwoMbGlicmFyeV9pbmZvGAIgASgLMi0ub3BlbmNlbnN1cy5wcm90by5hZ2Vu",
            "dC5jb21tb24udjEuTGlicmFyeUluZm8SQwoMc2VydmljZV9pbmZvGAMgASgL",
            "Mi0ub3BlbmNlbnN1cy5wcm90by5hZ2VudC5jb21tb24udjEuU2VydmljZUlu",
            "Zm8SSgoKYXR0cmlidXRlcxgEIAMoCzI2Lm9wZW5jZW5zdXMucHJvdG8uYWdl",
            "bnQuY29tbW9uLnYxLk5vZGUuQXR0cmlidXRlc0VudHJ5GjEKD0F0dHJpYnV0",
            "ZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImgKEVBy",
            "b2Nlc3NJZGVudGlmaWVyEhEKCWhvc3RfbmFtZRgBIAEoCRILCgNwaWQYAiAB",
            "KA0SMwoPc3RhcnRfdGltZXN0YW1wGAMgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcCKbAgoLTGlicmFyeUluZm8SSAoIbGFuZ3VhZ2UYASABKA4y",
            "Ni5vcGVuY2Vuc3VzLnByb3RvLmFnZW50LmNvbW1vbi52MS5MaWJyYXJ5SW5m",
            "by5MYW5ndWFnZRIYChBleHBvcnRlcl92ZXJzaW9uGAIgASgJEhwKFGNvcmVf",
            "bGlicmFyeV92ZXJzaW9uGAMgASgJIokBCghMYW5ndWFnZRIYChRMQU5HVUFH",
            "RV9VTlNQRUNJRklFRBAAEgcKA0NQUBABEgsKB0NfU0hBUlAQAhIKCgZFUkxB",
            "TkcQAxILCgdHT19MQU5HEAQSCAoESkFWQRAFEgsKB05PREVfSlMQBhIHCgNQ",
            "SFAQBxIKCgZQWVRIT04QCBIICgRSVUJZEAkiGwoLU2VydmljZUluZm8SDAoE",
            "bmFtZRgBIAEoCUJ/CiNpby5vcGVuY2Vuc3VzLnByb3RvLmFnZW50LmNvbW1v",
            "bi52MUILQ29tbW9uUHJvdG9QAVpJZ2l0aHViLmNvbS9jZW5zdXMtaW5zdHJ1",
            "bWVudGF0aW9uL29wZW5jZW5zdXMtcHJvdG8vZ2VuLWdvL2FnZW50L2NvbW1v",
            "bi92MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Common.V1.Node), global::OpenTelemetry.Proto.Agent.Common.V1.Node.Parser, new[]{ "Identifier", "LibraryInfo", "ServiceInfo", "Attributes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Common.V1.ProcessIdentifier), global::OpenTelemetry.Proto.Agent.Common.V1.ProcessIdentifier.Parser, new[]{ "HostName", "Pid", "StartTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo), global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo.Parser, new[]{ "Language", "ExporterVersion", "CoreLibraryVersion" }, null, new[]{ typeof(global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo.Types.Language) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Agent.Common.V1.ServiceInfo), global::OpenTelemetry.Proto.Agent.Common.V1.ServiceInfo.Parser, new[]{ "Name" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Identifier metadata of the Node (Application instrumented with OpenTelemetry)
  /// that connects to OpenTelemetry Agent.
  /// In the future we plan to extend the identifier proto definition to support
  /// additional information (e.g cloud id, etc.)
  /// </summary>
  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Common.V1.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      identifier_ = other.identifier_ != null ? other.identifier_.Clone() : null;
      libraryInfo_ = other.libraryInfo_ != null ? other.libraryInfo_.Clone() : null;
      serviceInfo_ = other.serviceInfo_ != null ? other.serviceInfo_.Clone() : null;
      attributes_ = other.attributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 1;
    private global::OpenTelemetry.Proto.Agent.Common.V1.ProcessIdentifier identifier_;
    /// <summary>
    /// Identifier that uniquely identifies a process within a VM/container.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.ProcessIdentifier Identifier {
      get { return identifier_; }
      set {
        identifier_ = value;
      }
    }

    /// <summary>Field number for the "library_info" field.</summary>
    public const int LibraryInfoFieldNumber = 2;
    private global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo libraryInfo_;
    /// <summary>
    /// Information on the OpenTelemetry Library that initiates the stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo LibraryInfo {
      get { return libraryInfo_; }
      set {
        libraryInfo_ = value;
      }
    }

    /// <summary>Field number for the "service_info" field.</summary>
    public const int ServiceInfoFieldNumber = 3;
    private global::OpenTelemetry.Proto.Agent.Common.V1.ServiceInfo serviceInfo_;
    /// <summary>
    /// Additional information on service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.ServiceInfo ServiceInfo {
      get { return serviceInfo_; }
      set {
        serviceInfo_ = value;
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_attributes_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> attributes_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Additional attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Attributes {
      get { return attributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identifier, other.Identifier)) return false;
      if (!object.Equals(LibraryInfo, other.LibraryInfo)) return false;
      if (!object.Equals(ServiceInfo, other.ServiceInfo)) return false;
      if (!Attributes.Equals(other.Attributes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identifier_ != null) hash ^= Identifier.GetHashCode();
      if (libraryInfo_ != null) hash ^= LibraryInfo.GetHashCode();
      if (serviceInfo_ != null) hash ^= ServiceInfo.GetHashCode();
      hash ^= Attributes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identifier);
      }
      if (libraryInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LibraryInfo);
      }
      if (serviceInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ServiceInfo);
      }
      attributes_.WriteTo(output, _map_attributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
      }
      if (libraryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LibraryInfo);
      }
      if (serviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceInfo);
      }
      size += attributes_.CalculateSize(_map_attributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.identifier_ != null) {
        if (identifier_ == null) {
          identifier_ = new global::OpenTelemetry.Proto.Agent.Common.V1.ProcessIdentifier();
        }
        Identifier.MergeFrom(other.Identifier);
      }
      if (other.libraryInfo_ != null) {
        if (libraryInfo_ == null) {
          libraryInfo_ = new global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo();
        }
        LibraryInfo.MergeFrom(other.LibraryInfo);
      }
      if (other.serviceInfo_ != null) {
        if (serviceInfo_ == null) {
          serviceInfo_ = new global::OpenTelemetry.Proto.Agent.Common.V1.ServiceInfo();
        }
        ServiceInfo.MergeFrom(other.ServiceInfo);
      }
      attributes_.Add(other.attributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identifier_ == null) {
              identifier_ = new global::OpenTelemetry.Proto.Agent.Common.V1.ProcessIdentifier();
            }
            input.ReadMessage(identifier_);
            break;
          }
          case 18: {
            if (libraryInfo_ == null) {
              libraryInfo_ = new global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo();
            }
            input.ReadMessage(libraryInfo_);
            break;
          }
          case 26: {
            if (serviceInfo_ == null) {
              serviceInfo_ = new global::OpenTelemetry.Proto.Agent.Common.V1.ServiceInfo();
            }
            input.ReadMessage(serviceInfo_);
            break;
          }
          case 34: {
            attributes_.AddEntriesFrom(input, _map_attributes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Identifier that uniquely identifies a process within a VM/container.
  /// </summary>
  public sealed partial class ProcessIdentifier : pb::IMessage<ProcessIdentifier> {
    private static readonly pb::MessageParser<ProcessIdentifier> _parser = new pb::MessageParser<ProcessIdentifier>(() => new ProcessIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProcessIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Common.V1.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessIdentifier(ProcessIdentifier other) : this() {
      hostName_ = other.hostName_;
      pid_ = other.pid_;
      startTimestamp_ = other.startTimestamp_ != null ? other.startTimestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessIdentifier Clone() {
      return new ProcessIdentifier(this);
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 1;
    private string hostName_ = "";
    /// <summary>
    /// The host name. Usually refers to the machine/container name.
    /// For example: os.Hostname() in Go, socket.gethostname() in Python.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    /// <summary>
    /// Process id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTimestamp_;
    /// <summary>
    /// Start time of this ProcessIdentifier. Represented in epoch time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProcessIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProcessIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostName != other.HostName) return false;
      if (Pid != other.Pid) return false;
      if (!object.Equals(StartTimestamp, other.StartTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (startTimestamp_ != null) hash ^= StartTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostName);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (startTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (startTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProcessIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.startTimestamp_ != null) {
        if (startTimestamp_ == null) {
          startTimestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTimestamp.MergeFrom(other.StartTimestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostName = input.ReadString();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 26: {
            if (startTimestamp_ == null) {
              startTimestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTimestamp_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Information on OpenTelemetry Library.
  /// </summary>
  public sealed partial class LibraryInfo : pb::IMessage<LibraryInfo> {
    private static readonly pb::MessageParser<LibraryInfo> _parser = new pb::MessageParser<LibraryInfo>(() => new LibraryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LibraryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Common.V1.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LibraryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LibraryInfo(LibraryInfo other) : this() {
      language_ = other.language_;
      exporterVersion_ = other.exporterVersion_;
      coreLibraryVersion_ = other.coreLibraryVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LibraryInfo Clone() {
      return new LibraryInfo(this);
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 1;
    private global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo.Types.Language language_ = 0;
    /// <summary>
    /// Language of OpenTelemetry Library.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo.Types.Language Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "exporter_version" field.</summary>
    public const int ExporterVersionFieldNumber = 2;
    private string exporterVersion_ = "";
    /// <summary>
    /// Version of Agent exporter of Library.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExporterVersion {
      get { return exporterVersion_; }
      set {
        exporterVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "core_library_version" field.</summary>
    public const int CoreLibraryVersionFieldNumber = 3;
    private string coreLibraryVersion_ = "";
    /// <summary>
    /// Version of OpenTelemetry Library.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoreLibraryVersion {
      get { return coreLibraryVersion_; }
      set {
        coreLibraryVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LibraryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LibraryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      if (ExporterVersion != other.ExporterVersion) return false;
      if (CoreLibraryVersion != other.CoreLibraryVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Language != 0) hash ^= Language.GetHashCode();
      if (ExporterVersion.Length != 0) hash ^= ExporterVersion.GetHashCode();
      if (CoreLibraryVersion.Length != 0) hash ^= CoreLibraryVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Language != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Language);
      }
      if (ExporterVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExporterVersion);
      }
      if (CoreLibraryVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CoreLibraryVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Language);
      }
      if (ExporterVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExporterVersion);
      }
      if (CoreLibraryVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreLibraryVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LibraryInfo other) {
      if (other == null) {
        return;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.ExporterVersion.Length != 0) {
        ExporterVersion = other.ExporterVersion;
      }
      if (other.CoreLibraryVersion.Length != 0) {
        CoreLibraryVersion = other.CoreLibraryVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            language_ = (global::OpenTelemetry.Proto.Agent.Common.V1.LibraryInfo.Types.Language) input.ReadEnum();
            break;
          }
          case 18: {
            ExporterVersion = input.ReadString();
            break;
          }
          case 26: {
            CoreLibraryVersion = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LibraryInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Language {
        [pbr::OriginalName("LANGUAGE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("CPP")] Cpp = 1,
        [pbr::OriginalName("C_SHARP")] CSharp = 2,
        [pbr::OriginalName("ERLANG")] Erlang = 3,
        [pbr::OriginalName("GO_LANG")] GoLang = 4,
        [pbr::OriginalName("JAVA")] Java = 5,
        [pbr::OriginalName("NODE_JS")] NodeJs = 6,
        [pbr::OriginalName("PHP")] Php = 7,
        [pbr::OriginalName("PYTHON")] Python = 8,
        [pbr::OriginalName("RUBY")] Ruby = 9,
      }

    }
    #endregion

  }

  /// <summary>
  /// Additional service information.
  /// </summary>
  public sealed partial class ServiceInfo : pb::IMessage<ServiceInfo> {
    private static readonly pb::MessageParser<ServiceInfo> _parser = new pb::MessageParser<ServiceInfo>(() => new ServiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Agent.Common.V1.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo(ServiceInfo other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInfo Clone() {
      return new ServiceInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
