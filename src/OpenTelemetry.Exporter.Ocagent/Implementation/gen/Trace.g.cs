// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: trace/v1/trace.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenTelemetry.Proto.Trace.V1 {

  /// <summary>Holder for reflection information generated from trace/v1/trace.proto</summary>
  public static partial class TraceReflection {

    #region Descriptor
    /// <summary>File descriptor for trace/v1/trace.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TraceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0cmFjZS92MS90cmFjZS5wcm90bxIZb3BlbmNlbnN1cy5wcm90by50cmFj",
            "ZS52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoeZ29vZ2xl",
            "L3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIrIRCgRTcGFuEhAKCHRyYWNlX2lk",
            "GAEgASgMEg8KB3NwYW5faWQYAiABKAwSPgoKdHJhY2VzdGF0ZRgPIAEoCzIq",
            "Lm9wZW5jZW5zdXMucHJvdG8udHJhY2UudjEuU3Bhbi5UcmFjZXN0YXRlEhYK",
            "DnBhcmVudF9zcGFuX2lkGAMgASgMEjoKBG5hbWUYBCABKAsyLC5vcGVuY2Vu",
            "c3VzLnByb3RvLnRyYWNlLnYxLlRydW5jYXRhYmxlU3RyaW5nEjYKBGtpbmQY",
            "DiABKA4yKC5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLlNwYW4uU3Bhbktp",
            "bmQSLgoKc3RhcnRfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASLAoIZW5kX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEj4KCmF0dHJpYnV0ZXMYByABKAsyKi5vcGVuY2Vuc3VzLnByb3Rv",
            "LnRyYWNlLnYxLlNwYW4uQXR0cmlidXRlcxI6CgtzdGFja190cmFjZRgIIAEo",
            "CzIlLm9wZW5jZW5zdXMucHJvdG8udHJhY2UudjEuU3RhY2tUcmFjZRI/Cgt0",
            "aW1lX2V2ZW50cxgJIAEoCzIqLm9wZW5jZW5zdXMucHJvdG8udHJhY2UudjEu",
            "U3Bhbi5UaW1lRXZlbnRzEjQKBWxpbmtzGAogASgLMiUub3BlbmNlbnN1cy5w",
            "cm90by50cmFjZS52MS5TcGFuLkxpbmtzEjEKBnN0YXR1cxgLIAEoCzIhLm9w",
            "ZW5jZW5zdXMucHJvdG8udHJhY2UudjEuU3RhdHVzEj8KG3NhbWVfcHJvY2Vz",
            "c19hc19wYXJlbnRfc3BhbhgMIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29s",
            "VmFsdWUSNgoQY2hpbGRfc3Bhbl9jb3VudBgNIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5VSW50MzJWYWx1ZRp0CgpUcmFjZXN0YXRlEkEKB2VudHJpZXMYASAD",
            "KAsyMC5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLlNwYW4uVHJhY2VzdGF0",
            "ZS5FbnRyeRojCgVFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAka",
            "4wEKCkF0dHJpYnV0ZXMSUwoNYXR0cmlidXRlX21hcBgBIAMoCzI8Lm9wZW5j",
            "ZW5zdXMucHJvdG8udHJhY2UudjEuU3Bhbi5BdHRyaWJ1dGVzLkF0dHJpYnV0",
            "ZU1hcEVudHJ5EiAKGGRyb3BwZWRfYXR0cmlidXRlc19jb3VudBgCIAEoBRpe",
            "ChFBdHRyaWJ1dGVNYXBFbnRyeRILCgNrZXkYASABKAkSOAoFdmFsdWUYAiAB",
            "KAsyKS5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLkF0dHJpYnV0ZVZhbHVl",
            "OgI4ARq/BAoJVGltZUV2ZW50EigKBHRpbWUYASABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEkoKCmFubm90YXRpb24YAiABKAsyNC5vcGVuY2Vu",
            "c3VzLnByb3RvLnRyYWNlLnYxLlNwYW4uVGltZUV2ZW50LkFubm90YXRpb25I",
            "ABJPCg1tZXNzYWdlX2V2ZW50GAMgASgLMjYub3BlbmNlbnN1cy5wcm90by50",
            "cmFjZS52MS5TcGFuLlRpbWVFdmVudC5NZXNzYWdlRXZlbnRIABqPAQoKQW5u",
            "b3RhdGlvbhJBCgtkZXNjcmlwdGlvbhgBIAEoCzIsLm9wZW5jZW5zdXMucHJv",
            "dG8udHJhY2UudjEuVHJ1bmNhdGFibGVTdHJpbmcSPgoKYXR0cmlidXRlcxgC",
            "IAEoCzIqLm9wZW5jZW5zdXMucHJvdG8udHJhY2UudjEuU3Bhbi5BdHRyaWJ1",
            "dGVzGs8BCgxNZXNzYWdlRXZlbnQSSQoEdHlwZRgBIAEoDjI7Lm9wZW5jZW5z",
            "dXMucHJvdG8udHJhY2UudjEuU3Bhbi5UaW1lRXZlbnQuTWVzc2FnZUV2ZW50",
            "LlR5cGUSCgoCaWQYAiABKAQSGQoRdW5jb21wcmVzc2VkX3NpemUYAyABKAQS",
            "FwoPY29tcHJlc3NlZF9zaXplGAQgASgEIjQKBFR5cGUSFAoQVFlQRV9VTlNQ",
            "RUNJRklFRBAAEggKBFNFTlQQARIMCghSRUNFSVZFRBACQgcKBXZhbHVlGpQB",
            "CgpUaW1lRXZlbnRzEj0KCnRpbWVfZXZlbnQYASADKAsyKS5vcGVuY2Vuc3Vz",
            "LnByb3RvLnRyYWNlLnYxLlNwYW4uVGltZUV2ZW50EiEKGWRyb3BwZWRfYW5u",
            "b3RhdGlvbnNfY291bnQYAiABKAUSJAocZHJvcHBlZF9tZXNzYWdlX2V2ZW50",
            "c19jb3VudBgDIAEoBRrvAQoETGluaxIQCgh0cmFjZV9pZBgBIAEoDBIPCgdz",
            "cGFuX2lkGAIgASgMEjcKBHR5cGUYAyABKA4yKS5vcGVuY2Vuc3VzLnByb3Rv",
            "LnRyYWNlLnYxLlNwYW4uTGluay5UeXBlEj4KCmF0dHJpYnV0ZXMYBCABKAsy",
            "Ki5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLlNwYW4uQXR0cmlidXRlcyJL",
            "CgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIVChFDSElMRF9MSU5LRURf",
            "U1BBThABEhYKElBBUkVOVF9MSU5LRURfU1BBThACGlgKBUxpbmtzEjIKBGxp",
            "bmsYASADKAsyJC5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLlNwYW4uTGlu",
            "axIbChNkcm9wcGVkX2xpbmtzX2NvdW50GAIgASgFIj0KCFNwYW5LaW5kEhkK",
            "FVNQQU5fS0lORF9VTlNQRUNJRklFRBAAEgoKBlNFUlZFUhABEgoKBkNMSUVO",
            "VBACIicKBlN0YXR1cxIMCgRjb2RlGAEgASgFEg8KB21lc3NhZ2UYAiABKAki",
            "ogEKDkF0dHJpYnV0ZVZhbHVlEkQKDHN0cmluZ192YWx1ZRgBIAEoCzIsLm9w",
            "ZW5jZW5zdXMucHJvdG8udHJhY2UudjEuVHJ1bmNhdGFibGVTdHJpbmdIABIT",
            "CglpbnRfdmFsdWUYAiABKANIABIUCgpib29sX3ZhbHVlGAMgASgISAASFgoM",
            "ZG91YmxlX3ZhbHVlGAQgASgBSABCBwoFdmFsdWUi7QQKClN0YWNrVHJhY2US",
            "RwoMc3RhY2tfZnJhbWVzGAEgASgLMjEub3BlbmNlbnN1cy5wcm90by50cmFj",
            "ZS52MS5TdGFja1RyYWNlLlN0YWNrRnJhbWVzEhsKE3N0YWNrX3RyYWNlX2hh",
            "c2hfaWQYAiABKAQaigMKClN0YWNrRnJhbWUSQwoNZnVuY3Rpb25fbmFtZRgB",
            "IAEoCzIsLm9wZW5jZW5zdXMucHJvdG8udHJhY2UudjEuVHJ1bmNhdGFibGVT",
            "dHJpbmcSTAoWb3JpZ2luYWxfZnVuY3Rpb25fbmFtZRgCIAEoCzIsLm9wZW5j",
            "ZW5zdXMucHJvdG8udHJhY2UudjEuVHJ1bmNhdGFibGVTdHJpbmcSPwoJZmls",
            "ZV9uYW1lGAMgASgLMiwub3BlbmNlbnN1cy5wcm90by50cmFjZS52MS5UcnVu",
            "Y2F0YWJsZVN0cmluZxITCgtsaW5lX251bWJlchgEIAEoAxIVCg1jb2x1bW5f",
            "bnVtYmVyGAUgASgDEjYKC2xvYWRfbW9kdWxlGAYgASgLMiEub3BlbmNlbnN1",
            "cy5wcm90by50cmFjZS52MS5Nb2R1bGUSRAoOc291cmNlX3ZlcnNpb24YByAB",
            "KAsyLC5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLlRydW5jYXRhYmxlU3Ry",
            "aW5nGmwKC1N0YWNrRnJhbWVzEj8KBWZyYW1lGAEgAygLMjAub3BlbmNlbnN1",
            "cy5wcm90by50cmFjZS52MS5TdGFja1RyYWNlLlN0YWNrRnJhbWUSHAoUZHJv",
            "cHBlZF9mcmFtZXNfY291bnQYAiABKAUihgEKBk1vZHVsZRI8CgZtb2R1bGUY",
            "ASABKAsyLC5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxLlRydW5jYXRhYmxl",
            "U3RyaW5nEj4KCGJ1aWxkX2lkGAIgASgLMiwub3BlbmNlbnN1cy5wcm90by50",
            "cmFjZS52MS5UcnVuY2F0YWJsZVN0cmluZyJAChFUcnVuY2F0YWJsZVN0cmlu",
            "ZxINCgV2YWx1ZRgBIAEoCRIcChR0cnVuY2F0ZWRfYnl0ZV9jb3VudBgCIAEo",
            "BUJwChxpby5vcGVuY2Vuc3VzLnByb3RvLnRyYWNlLnYxQgpUcmFjZVByb3Rv",
            "UAFaQmdpdGh1Yi5jb20vY2Vuc3VzLWluc3RydW1lbnRhdGlvbi9vcGVuY2Vu",
            "c3VzLXByb3RvL2dlbi1nby90cmFjZS92MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span), global::OpenTelemetry.Proto.Trace.V1.Span.Parser, new[]{ "TraceId", "SpanId", "Tracestate", "ParentSpanId", "Name", "Kind", "StartTime", "EndTime", "Attributes", "StackTrace", "TimeEvents", "Links", "Status", "SameProcessAsParentSpan", "ChildSpanCount" }, null, new[]{ typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate), global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Parser, new[]{ "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry), global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry.Parser, new[]{ "Key", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes), global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes.Parser, new[]{ "AttributeMap", "DroppedAttributesCount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent), global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Parser, new[]{ "Time", "Annotation", "MessageEvent" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation), global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation.Parser, new[]{ "Description", "Attributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent), global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent.Parser, new[]{ "Type", "Id", "UncompressedSize", "CompressedSize" }, null, new[]{ typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent.Types.Type) }, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvents), global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvents.Parser, new[]{ "TimeEvent", "DroppedAnnotationsCount", "DroppedMessageEventsCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link), global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Parser, new[]{ "TraceId", "SpanId", "Type", "Attributes" }, null, new[]{ typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Span.Types.Links), global::OpenTelemetry.Proto.Trace.V1.Span.Types.Links.Parser, new[]{ "Link", "DroppedLinksCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Status), global::OpenTelemetry.Proto.Trace.V1.Status.Parser, new[]{ "Code", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.AttributeValue), global::OpenTelemetry.Proto.Trace.V1.AttributeValue.Parser, new[]{ "StringValue", "IntValue", "BoolValue", "DoubleValue" }, new[]{ "Value" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.StackTrace), global::OpenTelemetry.Proto.Trace.V1.StackTrace.Parser, new[]{ "StackFrames", "StackTraceHashId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame), global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame.Parser, new[]{ "FunctionName", "OriginalFunctionName", "FileName", "LineNumber", "ColumnNumber", "LoadModule", "SourceVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrames), global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrames.Parser, new[]{ "Frame", "DroppedFramesCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.Module), global::OpenTelemetry.Proto.Trace.V1.Module.Parser, new[]{ "Module_", "BuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenTelemetry.Proto.Trace.V1.TruncatableString), global::OpenTelemetry.Proto.Trace.V1.TruncatableString.Parser, new[]{ "Value", "TruncatedByteCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A span represents a single operation within a trace. Spans can be
  /// nested to form a trace tree. Often, a trace contains a root span
  /// that describes the end-to-end latency, and one or more subspans for
  /// its sub-operations. A trace can also contain multiple root spans,
  /// or none at all. Spans do not need to be contiguous - there may be
  /// gaps or overlaps between spans in a trace.
  ///
  /// The next id is 16.
  /// TODO(bdrutu): Add an example.
  /// </summary>
  public sealed partial class Span : pb::IMessage<Span> {
    private static readonly pb::MessageParser<Span> _parser = new pb::MessageParser<Span>(() => new Span());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Span> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span(Span other) : this() {
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      tracestate_ = other.tracestate_ != null ? other.tracestate_.Clone() : null;
      parentSpanId_ = other.parentSpanId_;
      name_ = other.name_ != null ? other.name_.Clone() : null;
      kind_ = other.kind_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      attributes_ = other.attributes_ != null ? other.attributes_.Clone() : null;
      stackTrace_ = other.stackTrace_ != null ? other.stackTrace_.Clone() : null;
      timeEvents_ = other.timeEvents_ != null ? other.timeEvents_.Clone() : null;
      links_ = other.links_ != null ? other.links_.Clone() : null;
      status_ = other.status_ != null ? other.status_.Clone() : null;
      SameProcessAsParentSpan = other.SameProcessAsParentSpan;
      ChildSpanCount = other.ChildSpanCount;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Span Clone() {
      return new Span(this);
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private pb::ByteString traceId_ = pb::ByteString.Empty;
    /// <summary>
    /// A unique identifier for a trace. All spans from the same trace share
    /// the same `trace_id`. The ID is a 16-byte array.
    ///
    /// This field is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 2;
    private pb::ByteString spanId_ = pb::ByteString.Empty;
    /// <summary>
    /// A unique identifier for a span within a trace, assigned when the span
    /// is created. The ID is an 8-byte array.
    ///
    /// This field is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tracestate" field.</summary>
    public const int TracestateFieldNumber = 15;
    private global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate tracestate_;
    /// <summary>
    /// The Tracestate on the span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate Tracestate {
      get { return tracestate_; }
      set {
        tracestate_ = value;
      }
    }

    /// <summary>Field number for the "parent_span_id" field.</summary>
    public const int ParentSpanIdFieldNumber = 3;
    private pb::ByteString parentSpanId_ = pb::ByteString.Empty;
    /// <summary>
    /// The `span_id` of this span's parent span. If this is a root span, then this
    /// field must be empty. The ID is an 8-byte array.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private global::OpenTelemetry.Proto.Trace.V1.TruncatableString name_;
    /// <summary>
    /// A description of the span's operation.
    ///
    /// For example, the name can be a qualified method name or a file name
    /// and a line number where the operation is called. A best practice is to use
    /// the same display name at the same call point in an application.
    /// This makes it easier to correlate spans in different traces.
    ///
    /// This field is required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.TruncatableString Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 14;
    private global::OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind kind_ = 0;
    /// <summary>
    /// Distinguishes between spans generated in a particular context. For example,
    /// two spans with the same name may be distinguished using `CLIENT`
    /// and `SERVER` to identify queueing latency associated with the span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The start time of the span. On the client side, this is the time kept by
    /// the local machine where the span execution starts. On the server side, this
    /// is the time when the server's application handler starts running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// The end time of the span. On the client side, this is the time kept by
    /// the local machine where the span execution ends. On the server side, this
    /// is the time when the server application handler stops running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 7;
    private global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes attributes_;
    /// <summary>
    /// A set of attributes on the span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes Attributes {
      get { return attributes_; }
      set {
        attributes_ = value;
      }
    }

    /// <summary>Field number for the "stack_trace" field.</summary>
    public const int StackTraceFieldNumber = 8;
    private global::OpenTelemetry.Proto.Trace.V1.StackTrace stackTrace_;
    /// <summary>
    /// A stack trace captured at the start of the span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.StackTrace StackTrace {
      get { return stackTrace_; }
      set {
        stackTrace_ = value;
      }
    }

    /// <summary>Field number for the "time_events" field.</summary>
    public const int TimeEventsFieldNumber = 9;
    private global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvents timeEvents_;
    /// <summary>
    /// The included time events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvents TimeEvents {
      get { return timeEvents_; }
      set {
        timeEvents_ = value;
      }
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 10;
    private global::OpenTelemetry.Proto.Trace.V1.Span.Types.Links links_;
    /// <summary>
    /// The included links.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.Span.Types.Links Links {
      get { return links_; }
      set {
        links_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 11;
    private global::OpenTelemetry.Proto.Trace.V1.Status status_;
    /// <summary>
    /// An optional final status for this span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "same_process_as_parent_span" field.</summary>
    public const int SameProcessAsParentSpanFieldNumber = 12;
    private static readonly pb::FieldCodec<bool?> _single_sameProcessAsParentSpan_codec = pb::FieldCodec.ForStructWrapper<bool>(98);
    private bool? sameProcessAsParentSpan_;
    /// <summary>
    /// A highly recommended but not required flag that identifies when a trace
    /// crosses a process boundary. True when the parent_span belongs to the
    /// same process as the current span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SameProcessAsParentSpan {
      get { return sameProcessAsParentSpan_; }
      set {
        sameProcessAsParentSpan_ = value;
      }
    }

    /// <summary>Field number for the "child_span_count" field.</summary>
    public const int ChildSpanCountFieldNumber = 13;
    private static readonly pb::FieldCodec<uint?> _single_childSpanCount_codec = pb::FieldCodec.ForStructWrapper<uint>(106);
    private uint? childSpanCount_;
    /// <summary>
    /// An optional number of child spans that were generated while this span
    /// was active. If set, allows an implementation to detect missing child spans.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? ChildSpanCount {
      get { return childSpanCount_; }
      set {
        childSpanCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Span);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Span other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (!object.Equals(Tracestate, other.Tracestate)) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (!object.Equals(Name, other.Name)) return false;
      if (Kind != other.Kind) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(Attributes, other.Attributes)) return false;
      if (!object.Equals(StackTrace, other.StackTrace)) return false;
      if (!object.Equals(TimeEvents, other.TimeEvents)) return false;
      if (!object.Equals(Links, other.Links)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (SameProcessAsParentSpan != other.SameProcessAsParentSpan) return false;
      if (ChildSpanCount != other.ChildSpanCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (tracestate_ != null) hash ^= Tracestate.GetHashCode();
      if (ParentSpanId.Length != 0) hash ^= ParentSpanId.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (attributes_ != null) hash ^= Attributes.GetHashCode();
      if (stackTrace_ != null) hash ^= StackTrace.GetHashCode();
      if (timeEvents_ != null) hash ^= TimeEvents.GetHashCode();
      if (links_ != null) hash ^= Links.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (sameProcessAsParentSpan_ != null) hash ^= SameProcessAsParentSpan.GetHashCode();
      if (childSpanCount_ != null) hash ^= ChildSpanCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TraceId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SpanId);
      }
      if (ParentSpanId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ParentSpanId);
      }
      if (name_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Name);
      }
      if (startTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EndTime);
      }
      if (attributes_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Attributes);
      }
      if (stackTrace_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StackTrace);
      }
      if (timeEvents_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TimeEvents);
      }
      if (links_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Links);
      }
      if (status_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Status);
      }
      if (sameProcessAsParentSpan_ != null) {
        _single_sameProcessAsParentSpan_codec.WriteTagAndValue(output, SameProcessAsParentSpan);
      }
      if (childSpanCount_ != null) {
        _single_childSpanCount_codec.WriteTagAndValue(output, ChildSpanCount);
      }
      if (Kind != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Kind);
      }
      if (tracestate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Tracestate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TraceId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SpanId);
      }
      if (tracestate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tracestate);
      }
      if (ParentSpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ParentSpanId);
      }
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (attributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attributes);
      }
      if (stackTrace_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StackTrace);
      }
      if (timeEvents_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeEvents);
      }
      if (links_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Links);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (sameProcessAsParentSpan_ != null) {
        size += _single_sameProcessAsParentSpan_codec.CalculateSizeWithTag(SameProcessAsParentSpan);
      }
      if (childSpanCount_ != null) {
        size += _single_childSpanCount_codec.CalculateSizeWithTag(ChildSpanCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Span other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      if (other.tracestate_ != null) {
        if (tracestate_ == null) {
          tracestate_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate();
        }
        Tracestate.MergeFrom(other.Tracestate);
      }
      if (other.ParentSpanId.Length != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          name_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.attributes_ != null) {
        if (attributes_ == null) {
          attributes_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes();
        }
        Attributes.MergeFrom(other.Attributes);
      }
      if (other.stackTrace_ != null) {
        if (stackTrace_ == null) {
          stackTrace_ = new global::OpenTelemetry.Proto.Trace.V1.StackTrace();
        }
        StackTrace.MergeFrom(other.StackTrace);
      }
      if (other.timeEvents_ != null) {
        if (timeEvents_ == null) {
          timeEvents_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvents();
        }
        TimeEvents.MergeFrom(other.TimeEvents);
      }
      if (other.links_ != null) {
        if (links_ == null) {
          links_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Links();
        }
        Links.MergeFrom(other.Links);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::OpenTelemetry.Proto.Trace.V1.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.sameProcessAsParentSpan_ != null) {
        if (sameProcessAsParentSpan_ == null || other.SameProcessAsParentSpan != false) {
          SameProcessAsParentSpan = other.SameProcessAsParentSpan;
        }
      }
      if (other.childSpanCount_ != null) {
        if (childSpanCount_ == null || other.ChildSpanCount != 0) {
          ChildSpanCount = other.ChildSpanCount;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadBytes();
            break;
          }
          case 18: {
            SpanId = input.ReadBytes();
            break;
          }
          case 26: {
            ParentSpanId = input.ReadBytes();
            break;
          }
          case 34: {
            if (name_ == null) {
              name_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            input.ReadMessage(name_);
            break;
          }
          case 42: {
            if (startTime_ == null) {
              startTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startTime_);
            break;
          }
          case 50: {
            if (endTime_ == null) {
              endTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endTime_);
            break;
          }
          case 58: {
            if (attributes_ == null) {
              attributes_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes();
            }
            input.ReadMessage(attributes_);
            break;
          }
          case 66: {
            if (stackTrace_ == null) {
              stackTrace_ = new global::OpenTelemetry.Proto.Trace.V1.StackTrace();
            }
            input.ReadMessage(stackTrace_);
            break;
          }
          case 74: {
            if (timeEvents_ == null) {
              timeEvents_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvents();
            }
            input.ReadMessage(timeEvents_);
            break;
          }
          case 82: {
            if (links_ == null) {
              links_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Links();
            }
            input.ReadMessage(links_);
            break;
          }
          case 90: {
            if (status_ == null) {
              status_ = new global::OpenTelemetry.Proto.Trace.V1.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 98: {
            bool? value = _single_sameProcessAsParentSpan_codec.Read(input);
            if (sameProcessAsParentSpan_ == null || value != false) {
              SameProcessAsParentSpan = value;
            }
            break;
          }
          case 106: {
            uint? value = _single_childSpanCount_codec.Read(input);
            if (childSpanCount_ == null || value != 0) {
              ChildSpanCount = value;
            }
            break;
          }
          case 112: {
            kind_ = (global::OpenTelemetry.Proto.Trace.V1.Span.Types.SpanKind) input.ReadEnum();
            break;
          }
          case 122: {
            if (tracestate_ == null) {
              tracestate_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate();
            }
            input.ReadMessage(tracestate_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Span message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Type of span. Can be used to specify additional relationships between spans
      /// in addition to a parent/child relationship.
      /// </summary>
      public enum SpanKind {
        /// <summary>
        /// Unspecified.
        /// </summary>
        [pbr::OriginalName("SPAN_KIND_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Indicates that the span covers server-side handling of an RPC or other
        /// remote network request.
        /// </summary>
        [pbr::OriginalName("SERVER")] Server = 1,
        /// <summary>
        /// Indicates that the span covers the client-side wrapper around an RPC or
        /// other remote request.
        /// </summary>
        [pbr::OriginalName("CLIENT")] Client = 2,
      }

      /// <summary>
      /// This field conveys information about request position in multiple distributed tracing graphs.
      /// It is a list of Tracestate.Entry with a maximum of 32 members in the list.
      ///
      /// See the https://github.com/w3c/distributed-tracing for more details about this field.
      /// </summary>
      public sealed partial class Tracestate : pb::IMessage<Tracestate> {
        private static readonly pb::MessageParser<Tracestate> _parser = new pb::MessageParser<Tracestate>(() => new Tracestate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tracestate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.Span.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tracestate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tracestate(Tracestate other) : this() {
          entries_ = other.entries_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tracestate Clone() {
          return new Tracestate(this);
        }

        /// <summary>Field number for the "entries" field.</summary>
        public const int EntriesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry> _repeated_entries_codec
            = pb::FieldCodec.ForMessage(10, global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry.Parser);
        private readonly pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry> entries_ = new pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry>();
        /// <summary>
        /// A list of entries that represent the Tracestate.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Types.Entry> Entries {
          get { return entries_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tracestate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tracestate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!entries_.Equals(other.entries_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= entries_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          entries_.WriteTo(output, _repeated_entries_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += entries_.CalculateSize(_repeated_entries_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tracestate other) {
          if (other == null) {
            return;
          }
          entries_.Add(other.entries_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                entries_.AddEntriesFrom(input, _repeated_entries_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Tracestate message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Entry : pb::IMessage<Entry> {
            private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Entry> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::OpenTelemetry.Proto.Trace.V1.Span.Types.Tracestate.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Entry() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Entry(Entry other) : this() {
              key_ = other.key_;
              value_ = other.value_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Entry Clone() {
              return new Entry(this);
            }

            /// <summary>Field number for the "key" field.</summary>
            public const int KeyFieldNumber = 1;
            private string key_ = "";
            /// <summary>
            /// The key must begin with a lowercase letter, and can only contain
            /// lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
            /// '-', asterisks '*', and forward slashes '/'.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Key {
              get { return key_; }
              set {
                key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private string value_ = "";
            /// <summary>
            /// The value is opaque string up to 256 characters printable ASCII
            /// RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
            /// Note that this also excludes tabs, newlines, carriage returns, etc.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Entry);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Entry other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Key != other.Key) return false;
              if (Value != other.Value) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Key.Length != 0) hash ^= Key.GetHashCode();
              if (Value.Length != 0) hash ^= Value.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Key.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Key);
              }
              if (Value.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Key.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
              }
              if (Value.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Entry other) {
              if (other == null) {
                return;
              }
              if (other.Key.Length != 0) {
                Key = other.Key;
              }
              if (other.Value.Length != 0) {
                Value = other.Value;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Key = input.ReadString();
                    break;
                  }
                  case 18: {
                    Value = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// A set of attributes, each with a key and a value.
      /// </summary>
      public sealed partial class Attributes : pb::IMessage<Attributes> {
        private static readonly pb::MessageParser<Attributes> _parser = new pb::MessageParser<Attributes>(() => new Attributes());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attributes> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.Span.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attributes() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attributes(Attributes other) : this() {
          attributeMap_ = other.attributeMap_.Clone();
          droppedAttributesCount_ = other.droppedAttributesCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attributes Clone() {
          return new Attributes(this);
        }

        /// <summary>Field number for the "attribute_map" field.</summary>
        public const int AttributeMapFieldNumber = 1;
        private static readonly pbc::MapField<string, global::OpenTelemetry.Proto.Trace.V1.AttributeValue>.Codec _map_attributeMap_codec
            = new pbc::MapField<string, global::OpenTelemetry.Proto.Trace.V1.AttributeValue>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::OpenTelemetry.Proto.Trace.V1.AttributeValue.Parser), 10);
        private readonly pbc::MapField<string, global::OpenTelemetry.Proto.Trace.V1.AttributeValue> attributeMap_ = new pbc::MapField<string, global::OpenTelemetry.Proto.Trace.V1.AttributeValue>();
        /// <summary>
        /// The set of attributes. The value can be a string, an integer, or the
        /// Boolean values `true` and `false`. For example:
        ///
        ///     "/instance_id": "my-instance"
        ///     "/http/user_agent": ""
        ///     "/http/server_latency": 300
        ///     "abc.com/myattribute": true
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::OpenTelemetry.Proto.Trace.V1.AttributeValue> AttributeMap {
          get { return attributeMap_; }
        }

        /// <summary>Field number for the "dropped_attributes_count" field.</summary>
        public const int DroppedAttributesCountFieldNumber = 2;
        private int droppedAttributesCount_;
        /// <summary>
        /// The number of attributes that were discarded. Attributes can be discarded
        /// because their keys are too long or because there are too many attributes.
        /// If this value is 0, then no attributes were dropped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DroppedAttributesCount {
          get { return droppedAttributesCount_; }
          set {
            droppedAttributesCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attributes);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attributes other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!AttributeMap.Equals(other.AttributeMap)) return false;
          if (DroppedAttributesCount != other.DroppedAttributesCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= AttributeMap.GetHashCode();
          if (DroppedAttributesCount != 0) hash ^= DroppedAttributesCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          attributeMap_.WriteTo(output, _map_attributeMap_codec);
          if (DroppedAttributesCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DroppedAttributesCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += attributeMap_.CalculateSize(_map_attributeMap_codec);
          if (DroppedAttributesCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroppedAttributesCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attributes other) {
          if (other == null) {
            return;
          }
          attributeMap_.Add(other.attributeMap_);
          if (other.DroppedAttributesCount != 0) {
            DroppedAttributesCount = other.DroppedAttributesCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                attributeMap_.AddEntriesFrom(input, _map_attributeMap_codec);
                break;
              }
              case 16: {
                DroppedAttributesCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A time-stamped annotation or message event in the Span.
      /// </summary>
      public sealed partial class TimeEvent : pb::IMessage<TimeEvent> {
        private static readonly pb::MessageParser<TimeEvent> _parser = new pb::MessageParser<TimeEvent>(() => new TimeEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.Span.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeEvent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeEvent(TimeEvent other) : this() {
          time_ = other.time_ != null ? other.time_.Clone() : null;
          switch (other.ValueCase) {
            case ValueOneofCase.Annotation:
              Annotation = other.Annotation.Clone();
              break;
            case ValueOneofCase.MessageEvent:
              MessageEvent = other.MessageEvent.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeEvent Clone() {
          return new TimeEvent(this);
        }

        /// <summary>Field number for the "time" field.</summary>
        public const int TimeFieldNumber = 1;
        private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
        /// <summary>
        /// The time the event occurred.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
          get { return time_; }
          set {
            time_ = value;
          }
        }

        /// <summary>Field number for the "annotation" field.</summary>
        public const int AnnotationFieldNumber = 2;
        /// <summary>
        /// A text annotation with a set of attributes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation Annotation {
          get { return valueCase_ == ValueOneofCase.Annotation ? (global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Annotation;
          }
        }

        /// <summary>Field number for the "message_event" field.</summary>
        public const int MessageEventFieldNumber = 3;
        /// <summary>
        /// An event describing a message sent/received between Spans.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent MessageEvent {
          get { return valueCase_ == ValueOneofCase.MessageEvent ? (global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.MessageEvent;
          }
        }

        private object value_;
        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase {
          None = 0,
          Annotation = 2,
          MessageEvent = 3,
        }
        private ValueOneofCase valueCase_ = ValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase {
          get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          valueCase_ = ValueOneofCase.None;
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TimeEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeEvent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Time, other.Time)) return false;
          if (!object.Equals(Annotation, other.Annotation)) return false;
          if (!object.Equals(MessageEvent, other.MessageEvent)) return false;
          if (ValueCase != other.ValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (time_ != null) hash ^= Time.GetHashCode();
          if (valueCase_ == ValueOneofCase.Annotation) hash ^= Annotation.GetHashCode();
          if (valueCase_ == ValueOneofCase.MessageEvent) hash ^= MessageEvent.GetHashCode();
          hash ^= (int) valueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (time_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Time);
          }
          if (valueCase_ == ValueOneofCase.Annotation) {
            output.WriteRawTag(18);
            output.WriteMessage(Annotation);
          }
          if (valueCase_ == ValueOneofCase.MessageEvent) {
            output.WriteRawTag(26);
            output.WriteMessage(MessageEvent);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (time_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
          }
          if (valueCase_ == ValueOneofCase.Annotation) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Annotation);
          }
          if (valueCase_ == ValueOneofCase.MessageEvent) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageEvent);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeEvent other) {
          if (other == null) {
            return;
          }
          if (other.time_ != null) {
            if (time_ == null) {
              time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            Time.MergeFrom(other.Time);
          }
          switch (other.ValueCase) {
            case ValueOneofCase.Annotation:
              if (Annotation == null) {
                Annotation = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation();
              }
              Annotation.MergeFrom(other.Annotation);
              break;
            case ValueOneofCase.MessageEvent:
              if (MessageEvent == null) {
                MessageEvent = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent();
              }
              MessageEvent.MergeFrom(other.MessageEvent);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (time_ == null) {
                  time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(time_);
                break;
              }
              case 18: {
                global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation subBuilder = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.Annotation();
                if (valueCase_ == ValueOneofCase.Annotation) {
                  subBuilder.MergeFrom(Annotation);
                }
                input.ReadMessage(subBuilder);
                Annotation = subBuilder;
                break;
              }
              case 26: {
                global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent subBuilder = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent();
                if (valueCase_ == ValueOneofCase.MessageEvent) {
                  subBuilder.MergeFrom(MessageEvent);
                }
                input.ReadMessage(subBuilder);
                MessageEvent = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the TimeEvent message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A text annotation with a set of attributes.
          /// </summary>
          public sealed partial class Annotation : pb::IMessage<Annotation> {
            private static readonly pb::MessageParser<Annotation> _parser = new pb::MessageParser<Annotation>(() => new Annotation());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Annotation> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Annotation() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Annotation(Annotation other) : this() {
              description_ = other.description_ != null ? other.description_.Clone() : null;
              attributes_ = other.attributes_ != null ? other.attributes_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Annotation Clone() {
              return new Annotation(this);
            }

            /// <summary>Field number for the "description" field.</summary>
            public const int DescriptionFieldNumber = 1;
            private global::OpenTelemetry.Proto.Trace.V1.TruncatableString description_;
            /// <summary>
            /// A user-supplied message describing the event.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::OpenTelemetry.Proto.Trace.V1.TruncatableString Description {
              get { return description_; }
              set {
                description_ = value;
              }
            }

            /// <summary>Field number for the "attributes" field.</summary>
            public const int AttributesFieldNumber = 2;
            private global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes attributes_;
            /// <summary>
            /// A set of attributes on the annotation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes Attributes {
              get { return attributes_; }
              set {
                attributes_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Annotation);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Annotation other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Description, other.Description)) return false;
              if (!object.Equals(Attributes, other.Attributes)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (description_ != null) hash ^= Description.GetHashCode();
              if (attributes_ != null) hash ^= Attributes.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (description_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Description);
              }
              if (attributes_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Attributes);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (description_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
              }
              if (attributes_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attributes);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Annotation other) {
              if (other == null) {
                return;
              }
              if (other.description_ != null) {
                if (description_ == null) {
                  description_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
                }
                Description.MergeFrom(other.Description);
              }
              if (other.attributes_ != null) {
                if (attributes_ == null) {
                  attributes_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes();
                }
                Attributes.MergeFrom(other.Attributes);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (description_ == null) {
                      description_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
                    }
                    input.ReadMessage(description_);
                    break;
                  }
                  case 18: {
                    if (attributes_ == null) {
                      attributes_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes();
                    }
                    input.ReadMessage(attributes_);
                    break;
                  }
                }
              }
            }

          }

          /// <summary>
          /// An event describing a message sent/received between Spans.
          /// </summary>
          public sealed partial class MessageEvent : pb::IMessage<MessageEvent> {
            private static readonly pb::MessageParser<MessageEvent> _parser = new pb::MessageParser<MessageEvent>(() => new MessageEvent());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MessageEvent> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MessageEvent() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MessageEvent(MessageEvent other) : this() {
              type_ = other.type_;
              id_ = other.id_;
              uncompressedSize_ = other.uncompressedSize_;
              compressedSize_ = other.compressedSize_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MessageEvent Clone() {
              return new MessageEvent(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent.Types.Type type_ = 0;
            /// <summary>
            /// The type of MessageEvent. Indicates whether the message was sent or
            /// received.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent.Types.Type Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 2;
            private ulong id_;
            /// <summary>
            /// An identifier for the MessageEvent's message that can be used to match
            /// SENT and RECEIVED MessageEvents. For example, this field could
            /// represent a sequence ID for a streaming RPC. It is recommended to be
            /// unique within a Span.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            /// <summary>Field number for the "uncompressed_size" field.</summary>
            public const int UncompressedSizeFieldNumber = 3;
            private ulong uncompressedSize_;
            /// <summary>
            /// The number of uncompressed bytes sent or received.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong UncompressedSize {
              get { return uncompressedSize_; }
              set {
                uncompressedSize_ = value;
              }
            }

            /// <summary>Field number for the "compressed_size" field.</summary>
            public const int CompressedSizeFieldNumber = 4;
            private ulong compressedSize_;
            /// <summary>
            /// The number of compressed bytes sent or received. If zero, assumed to
            /// be the same size as uncompressed.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ulong CompressedSize {
              get { return compressedSize_; }
              set {
                compressedSize_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MessageEvent);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MessageEvent other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Id != other.Id) return false;
              if (UncompressedSize != other.UncompressedSize) return false;
              if (CompressedSize != other.CompressedSize) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != 0) hash ^= Type.GetHashCode();
              if (Id != 0UL) hash ^= Id.GetHashCode();
              if (UncompressedSize != 0UL) hash ^= UncompressedSize.GetHashCode();
              if (CompressedSize != 0UL) hash ^= CompressedSize.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (Id != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(Id);
              }
              if (UncompressedSize != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(UncompressedSize);
              }
              if (CompressedSize != 0UL) {
                output.WriteRawTag(32);
                output.WriteUInt64(CompressedSize);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (Id != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
              }
              if (UncompressedSize != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UncompressedSize);
              }
              if (CompressedSize != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CompressedSize);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MessageEvent other) {
              if (other == null) {
                return;
              }
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.Id != 0UL) {
                Id = other.Id;
              }
              if (other.UncompressedSize != 0UL) {
                UncompressedSize = other.UncompressedSize;
              }
              if (other.CompressedSize != 0UL) {
                CompressedSize = other.CompressedSize;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    type_ = (global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Types.MessageEvent.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Id = input.ReadUInt64();
                    break;
                  }
                  case 24: {
                    UncompressedSize = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    CompressedSize = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the MessageEvent message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              /// <summary>
              /// Indicates whether the message was sent or received.
              /// </summary>
              public enum Type {
                /// <summary>
                /// Unknown event type.
                /// </summary>
                [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
                /// <summary>
                /// Indicates a sent message.
                /// </summary>
                [pbr::OriginalName("SENT")] Sent = 1,
                /// <summary>
                /// Indicates a received message.
                /// </summary>
                [pbr::OriginalName("RECEIVED")] Received = 2,
              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      /// A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
      /// on the span, consisting of either user-supplied key-value pairs, or
      /// details of a message sent/received between Spans.
      /// </summary>
      public sealed partial class TimeEvents : pb::IMessage<TimeEvents> {
        private static readonly pb::MessageParser<TimeEvents> _parser = new pb::MessageParser<TimeEvents>(() => new TimeEvents());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeEvents> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.Span.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeEvents() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeEvents(TimeEvents other) : this() {
          timeEvent_ = other.timeEvent_.Clone();
          droppedAnnotationsCount_ = other.droppedAnnotationsCount_;
          droppedMessageEventsCount_ = other.droppedMessageEventsCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeEvents Clone() {
          return new TimeEvents(this);
        }

        /// <summary>Field number for the "time_event" field.</summary>
        public const int TimeEventFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent> _repeated_timeEvent_codec
            = pb::FieldCodec.ForMessage(10, global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent.Parser);
        private readonly pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent> timeEvent_ = new pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent>();
        /// <summary>
        /// A collection of `TimeEvent`s.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.TimeEvent> TimeEvent {
          get { return timeEvent_; }
        }

        /// <summary>Field number for the "dropped_annotations_count" field.</summary>
        public const int DroppedAnnotationsCountFieldNumber = 2;
        private int droppedAnnotationsCount_;
        /// <summary>
        /// The number of dropped annotations in all the included time events.
        /// If the value is 0, then no annotations were dropped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DroppedAnnotationsCount {
          get { return droppedAnnotationsCount_; }
          set {
            droppedAnnotationsCount_ = value;
          }
        }

        /// <summary>Field number for the "dropped_message_events_count" field.</summary>
        public const int DroppedMessageEventsCountFieldNumber = 3;
        private int droppedMessageEventsCount_;
        /// <summary>
        /// The number of dropped message events in all the included time events.
        /// If the value is 0, then no message events were dropped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DroppedMessageEventsCount {
          get { return droppedMessageEventsCount_; }
          set {
            droppedMessageEventsCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TimeEvents);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeEvents other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!timeEvent_.Equals(other.timeEvent_)) return false;
          if (DroppedAnnotationsCount != other.DroppedAnnotationsCount) return false;
          if (DroppedMessageEventsCount != other.DroppedMessageEventsCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= timeEvent_.GetHashCode();
          if (DroppedAnnotationsCount != 0) hash ^= DroppedAnnotationsCount.GetHashCode();
          if (DroppedMessageEventsCount != 0) hash ^= DroppedMessageEventsCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          timeEvent_.WriteTo(output, _repeated_timeEvent_codec);
          if (DroppedAnnotationsCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DroppedAnnotationsCount);
          }
          if (DroppedMessageEventsCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(DroppedMessageEventsCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += timeEvent_.CalculateSize(_repeated_timeEvent_codec);
          if (DroppedAnnotationsCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroppedAnnotationsCount);
          }
          if (DroppedMessageEventsCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroppedMessageEventsCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeEvents other) {
          if (other == null) {
            return;
          }
          timeEvent_.Add(other.timeEvent_);
          if (other.DroppedAnnotationsCount != 0) {
            DroppedAnnotationsCount = other.DroppedAnnotationsCount;
          }
          if (other.DroppedMessageEventsCount != 0) {
            DroppedMessageEventsCount = other.DroppedMessageEventsCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                timeEvent_.AddEntriesFrom(input, _repeated_timeEvent_codec);
                break;
              }
              case 16: {
                DroppedAnnotationsCount = input.ReadInt32();
                break;
              }
              case 24: {
                DroppedMessageEventsCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A pointer from the current span to another span in the same trace or in a
      /// different trace. For example, this can be used in batching operations,
      /// where a single batch handler processes multiple requests from different
      /// traces or when the handler receives a request from a different project.
      /// </summary>
      public sealed partial class Link : pb::IMessage<Link> {
        private static readonly pb::MessageParser<Link> _parser = new pb::MessageParser<Link>(() => new Link());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Link> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.Span.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Link() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Link(Link other) : this() {
          traceId_ = other.traceId_;
          spanId_ = other.spanId_;
          type_ = other.type_;
          attributes_ = other.attributes_ != null ? other.attributes_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Link Clone() {
          return new Link(this);
        }

        /// <summary>Field number for the "trace_id" field.</summary>
        public const int TraceIdFieldNumber = 1;
        private pb::ByteString traceId_ = pb::ByteString.Empty;
        /// <summary>
        /// A unique identifier for a trace. All spans from the same trace share
        /// the same `trace_id`. The ID is a 16-byte array.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TraceId {
          get { return traceId_; }
          set {
            traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "span_id" field.</summary>
        public const int SpanIdFieldNumber = 2;
        private pb::ByteString spanId_ = pb::ByteString.Empty;
        /// <summary>
        /// A unique identifier for a span within a trace, assigned when the span
        /// is created. The ID is an 8-byte array.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString SpanId {
          get { return spanId_; }
          set {
            spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Types.Type type_ = 0;
        /// <summary>
        /// The relationship of the current span relative to the linked span.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "attributes" field.</summary>
        public const int AttributesFieldNumber = 4;
        private global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes attributes_;
        /// <summary>
        /// A set of attributes on the link.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes Attributes {
          get { return attributes_; }
          set {
            attributes_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Link);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Link other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TraceId != other.TraceId) return false;
          if (SpanId != other.SpanId) return false;
          if (Type != other.Type) return false;
          if (!object.Equals(Attributes, other.Attributes)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
          if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (attributes_ != null) hash ^= Attributes.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TraceId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(TraceId);
          }
          if (SpanId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(SpanId);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (attributes_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Attributes);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TraceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TraceId);
          }
          if (SpanId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(SpanId);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (attributes_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attributes);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Link other) {
          if (other == null) {
            return;
          }
          if (other.TraceId.Length != 0) {
            TraceId = other.TraceId;
          }
          if (other.SpanId.Length != 0) {
            SpanId = other.SpanId;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.attributes_ != null) {
            if (attributes_ == null) {
              attributes_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes();
            }
            Attributes.MergeFrom(other.Attributes);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TraceId = input.ReadBytes();
                break;
              }
              case 18: {
                SpanId = input.ReadBytes();
                break;
              }
              case 24: {
                type_ = (global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Types.Type) input.ReadEnum();
                break;
              }
              case 34: {
                if (attributes_ == null) {
                  attributes_ = new global::OpenTelemetry.Proto.Trace.V1.Span.Types.Attributes();
                }
                input.ReadMessage(attributes_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Link message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The relationship of the current span relative to the linked span: child,
          /// parent, or unspecified.
          /// </summary>
          public enum Type {
            /// <summary>
            /// The relationship of the two spans is unknown, or known but other
            /// than parent-child.
            /// </summary>
            [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// The linked span is a child of the current span.
            /// </summary>
            [pbr::OriginalName("CHILD_LINKED_SPAN")] ChildLinkedSpan = 1,
            /// <summary>
            /// The linked span is a parent of the current span.
            /// </summary>
            [pbr::OriginalName("PARENT_LINKED_SPAN")] ParentLinkedSpan = 2,
          }

        }
        #endregion

      }

      /// <summary>
      /// A collection of links, which are references from this span to a span
      /// in the same or different trace.
      /// </summary>
      public sealed partial class Links : pb::IMessage<Links> {
        private static readonly pb::MessageParser<Links> _parser = new pb::MessageParser<Links>(() => new Links());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Links> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.Span.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Links() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Links(Links other) : this() {
          link_ = other.link_.Clone();
          droppedLinksCount_ = other.droppedLinksCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Links Clone() {
          return new Links(this);
        }

        /// <summary>Field number for the "link" field.</summary>
        public const int LinkFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link> _repeated_link_codec
            = pb::FieldCodec.ForMessage(10, global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link.Parser);
        private readonly pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link> link_ = new pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link>();
        /// <summary>
        /// A collection of links.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.Span.Types.Link> Link {
          get { return link_; }
        }

        /// <summary>Field number for the "dropped_links_count" field.</summary>
        public const int DroppedLinksCountFieldNumber = 2;
        private int droppedLinksCount_;
        /// <summary>
        /// The number of dropped links after the maximum size was enforced. If
        /// this value is 0, then no links were dropped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DroppedLinksCount {
          get { return droppedLinksCount_; }
          set {
            droppedLinksCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Links);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Links other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!link_.Equals(other.link_)) return false;
          if (DroppedLinksCount != other.DroppedLinksCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= link_.GetHashCode();
          if (DroppedLinksCount != 0) hash ^= DroppedLinksCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          link_.WriteTo(output, _repeated_link_codec);
          if (DroppedLinksCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DroppedLinksCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += link_.CalculateSize(_repeated_link_codec);
          if (DroppedLinksCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroppedLinksCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Links other) {
          if (other == null) {
            return;
          }
          link_.Add(other.link_);
          if (other.DroppedLinksCount != 0) {
            DroppedLinksCount = other.DroppedLinksCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                link_.AddEntriesFrom(input, _repeated_link_codec);
                break;
              }
              case 16: {
                DroppedLinksCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// The `Status` type defines a logical error model that is suitable for different
  /// programming environments, including REST APIs and RPC APIs. This proto's fields
  /// are a subset of those of
  /// [google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),
  /// which is used by [gRPC](https://github.com/grpc).
  /// </summary>
  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// The status code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// A developer-facing error message, which should be in English.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The value of an Attribute.
  /// </summary>
  public sealed partial class AttributeValue : pb::IMessage<AttributeValue> {
    private static readonly pb::MessageParser<AttributeValue> _parser = new pb::MessageParser<AttributeValue>(() => new AttributeValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValue(AttributeValue other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue.Clone();
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeValue Clone() {
      return new AttributeValue(this);
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 1;
    /// <summary>
    /// A string up to 256 bytes long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.TruncatableString StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (global::OpenTelemetry.Proto.Trace.V1.TruncatableString) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 2;
    /// <summary>
    /// A 64-bit signed integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntValue {
      get { return valueCase_ == ValueOneofCase.IntValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.IntValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 3;
    /// <summary>
    /// A Boolean value represented by `true` or `false`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 4;
    /// <summary>
    /// A double value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      StringValue = 1,
      IntValue = 2,
      BoolValue = 3,
      DoubleValue = 4,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StringValue, other.StringValue)) return false;
      if (IntValue != other.IntValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(10);
        output.WriteMessage(StringValue);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        output.WriteRawTag(16);
        output.WriteInt64(IntValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(24);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(33);
        output.WriteDouble(DoubleValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeValue other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          if (StringValue == null) {
            StringValue = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
          }
          StringValue.MergeFrom(other.StringValue);
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::OpenTelemetry.Proto.Trace.V1.TruncatableString subBuilder = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            if (valueCase_ == ValueOneofCase.StringValue) {
              subBuilder.MergeFrom(StringValue);
            }
            input.ReadMessage(subBuilder);
            StringValue = subBuilder;
            break;
          }
          case 16: {
            IntValue = input.ReadInt64();
            break;
          }
          case 24: {
            BoolValue = input.ReadBool();
            break;
          }
          case 33: {
            DoubleValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The call stack which originated this span.
  /// </summary>
  public sealed partial class StackTrace : pb::IMessage<StackTrace> {
    private static readonly pb::MessageParser<StackTrace> _parser = new pb::MessageParser<StackTrace>(() => new StackTrace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StackTrace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackTrace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackTrace(StackTrace other) : this() {
      stackFrames_ = other.stackFrames_ != null ? other.stackFrames_.Clone() : null;
      stackTraceHashId_ = other.stackTraceHashId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StackTrace Clone() {
      return new StackTrace(this);
    }

    /// <summary>Field number for the "stack_frames" field.</summary>
    public const int StackFramesFieldNumber = 1;
    private global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrames stackFrames_;
    /// <summary>
    /// Stack frames in this stack trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrames StackFrames {
      get { return stackFrames_; }
      set {
        stackFrames_ = value;
      }
    }

    /// <summary>Field number for the "stack_trace_hash_id" field.</summary>
    public const int StackTraceHashIdFieldNumber = 2;
    private ulong stackTraceHashId_;
    /// <summary>
    /// The hash ID is used to conserve network bandwidth for duplicate
    /// stack traces within a single trace.
    ///
    /// Often multiple spans will have identical stack traces.
    /// The first occurrence of a stack trace should contain both
    /// `stack_frames` and a value in `stack_trace_hash_id`.
    ///
    /// Subsequent spans within the same request can refer
    /// to that stack trace by setting only `stack_trace_hash_id`.
    ///
    /// TODO: describe how to deal with the case where stack_trace_hash_id is
    /// zero because it was not set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StackTraceHashId {
      get { return stackTraceHashId_; }
      set {
        stackTraceHashId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StackTrace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StackTrace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StackFrames, other.StackFrames)) return false;
      if (StackTraceHashId != other.StackTraceHashId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stackFrames_ != null) hash ^= StackFrames.GetHashCode();
      if (StackTraceHashId != 0UL) hash ^= StackTraceHashId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stackFrames_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StackFrames);
      }
      if (StackTraceHashId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(StackTraceHashId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stackFrames_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StackFrames);
      }
      if (StackTraceHashId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StackTraceHashId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StackTrace other) {
      if (other == null) {
        return;
      }
      if (other.stackFrames_ != null) {
        if (stackFrames_ == null) {
          stackFrames_ = new global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrames();
        }
        StackFrames.MergeFrom(other.StackFrames);
      }
      if (other.StackTraceHashId != 0UL) {
        StackTraceHashId = other.StackTraceHashId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stackFrames_ == null) {
              stackFrames_ = new global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrames();
            }
            input.ReadMessage(stackFrames_);
            break;
          }
          case 16: {
            StackTraceHashId = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StackTrace message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A single stack frame in a stack trace.
      /// </summary>
      public sealed partial class StackFrame : pb::IMessage<StackFrame> {
        private static readonly pb::MessageParser<StackFrame> _parser = new pb::MessageParser<StackFrame>(() => new StackFrame());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StackFrame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.StackTrace.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StackFrame() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StackFrame(StackFrame other) : this() {
          functionName_ = other.functionName_ != null ? other.functionName_.Clone() : null;
          originalFunctionName_ = other.originalFunctionName_ != null ? other.originalFunctionName_.Clone() : null;
          fileName_ = other.fileName_ != null ? other.fileName_.Clone() : null;
          lineNumber_ = other.lineNumber_;
          columnNumber_ = other.columnNumber_;
          loadModule_ = other.loadModule_ != null ? other.loadModule_.Clone() : null;
          sourceVersion_ = other.sourceVersion_ != null ? other.sourceVersion_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StackFrame Clone() {
          return new StackFrame(this);
        }

        /// <summary>Field number for the "function_name" field.</summary>
        public const int FunctionNameFieldNumber = 1;
        private global::OpenTelemetry.Proto.Trace.V1.TruncatableString functionName_;
        /// <summary>
        /// The fully-qualified name that uniquely identifies the function or
        /// method that is active in this frame.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.TruncatableString FunctionName {
          get { return functionName_; }
          set {
            functionName_ = value;
          }
        }

        /// <summary>Field number for the "original_function_name" field.</summary>
        public const int OriginalFunctionNameFieldNumber = 2;
        private global::OpenTelemetry.Proto.Trace.V1.TruncatableString originalFunctionName_;
        /// <summary>
        /// An un-mangled function name, if `function_name` is
        /// [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
        /// be fully qualified.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.TruncatableString OriginalFunctionName {
          get { return originalFunctionName_; }
          set {
            originalFunctionName_ = value;
          }
        }

        /// <summary>Field number for the "file_name" field.</summary>
        public const int FileNameFieldNumber = 3;
        private global::OpenTelemetry.Proto.Trace.V1.TruncatableString fileName_;
        /// <summary>
        /// The name of the source file where the function call appears.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.TruncatableString FileName {
          get { return fileName_; }
          set {
            fileName_ = value;
          }
        }

        /// <summary>Field number for the "line_number" field.</summary>
        public const int LineNumberFieldNumber = 4;
        private long lineNumber_;
        /// <summary>
        /// The line number in `file_name` where the function call appears.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LineNumber {
          get { return lineNumber_; }
          set {
            lineNumber_ = value;
          }
        }

        /// <summary>Field number for the "column_number" field.</summary>
        public const int ColumnNumberFieldNumber = 5;
        private long columnNumber_;
        /// <summary>
        /// The column number where the function call appears, if available.
        /// This is important in JavaScript because of its anonymous functions.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long ColumnNumber {
          get { return columnNumber_; }
          set {
            columnNumber_ = value;
          }
        }

        /// <summary>Field number for the "load_module" field.</summary>
        public const int LoadModuleFieldNumber = 6;
        private global::OpenTelemetry.Proto.Trace.V1.Module loadModule_;
        /// <summary>
        /// The binary module from where the code was loaded.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.Module LoadModule {
          get { return loadModule_; }
          set {
            loadModule_ = value;
          }
        }

        /// <summary>Field number for the "source_version" field.</summary>
        public const int SourceVersionFieldNumber = 7;
        private global::OpenTelemetry.Proto.Trace.V1.TruncatableString sourceVersion_;
        /// <summary>
        /// The version of the deployed source code.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::OpenTelemetry.Proto.Trace.V1.TruncatableString SourceVersion {
          get { return sourceVersion_; }
          set {
            sourceVersion_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StackFrame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StackFrame other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(FunctionName, other.FunctionName)) return false;
          if (!object.Equals(OriginalFunctionName, other.OriginalFunctionName)) return false;
          if (!object.Equals(FileName, other.FileName)) return false;
          if (LineNumber != other.LineNumber) return false;
          if (ColumnNumber != other.ColumnNumber) return false;
          if (!object.Equals(LoadModule, other.LoadModule)) return false;
          if (!object.Equals(SourceVersion, other.SourceVersion)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (functionName_ != null) hash ^= FunctionName.GetHashCode();
          if (originalFunctionName_ != null) hash ^= OriginalFunctionName.GetHashCode();
          if (fileName_ != null) hash ^= FileName.GetHashCode();
          if (LineNumber != 0L) hash ^= LineNumber.GetHashCode();
          if (ColumnNumber != 0L) hash ^= ColumnNumber.GetHashCode();
          if (loadModule_ != null) hash ^= LoadModule.GetHashCode();
          if (sourceVersion_ != null) hash ^= SourceVersion.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (functionName_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(FunctionName);
          }
          if (originalFunctionName_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(OriginalFunctionName);
          }
          if (fileName_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(FileName);
          }
          if (LineNumber != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LineNumber);
          }
          if (ColumnNumber != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(ColumnNumber);
          }
          if (loadModule_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(LoadModule);
          }
          if (sourceVersion_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(SourceVersion);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (functionName_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionName);
          }
          if (originalFunctionName_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginalFunctionName);
          }
          if (fileName_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FileName);
          }
          if (LineNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineNumber);
          }
          if (ColumnNumber != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(ColumnNumber);
          }
          if (loadModule_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadModule);
          }
          if (sourceVersion_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceVersion);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StackFrame other) {
          if (other == null) {
            return;
          }
          if (other.functionName_ != null) {
            if (functionName_ == null) {
              functionName_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            FunctionName.MergeFrom(other.FunctionName);
          }
          if (other.originalFunctionName_ != null) {
            if (originalFunctionName_ == null) {
              originalFunctionName_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            OriginalFunctionName.MergeFrom(other.OriginalFunctionName);
          }
          if (other.fileName_ != null) {
            if (fileName_ == null) {
              fileName_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            FileName.MergeFrom(other.FileName);
          }
          if (other.LineNumber != 0L) {
            LineNumber = other.LineNumber;
          }
          if (other.ColumnNumber != 0L) {
            ColumnNumber = other.ColumnNumber;
          }
          if (other.loadModule_ != null) {
            if (loadModule_ == null) {
              loadModule_ = new global::OpenTelemetry.Proto.Trace.V1.Module();
            }
            LoadModule.MergeFrom(other.LoadModule);
          }
          if (other.sourceVersion_ != null) {
            if (sourceVersion_ == null) {
              sourceVersion_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            SourceVersion.MergeFrom(other.SourceVersion);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (functionName_ == null) {
                  functionName_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
                }
                input.ReadMessage(functionName_);
                break;
              }
              case 18: {
                if (originalFunctionName_ == null) {
                  originalFunctionName_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
                }
                input.ReadMessage(originalFunctionName_);
                break;
              }
              case 26: {
                if (fileName_ == null) {
                  fileName_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
                }
                input.ReadMessage(fileName_);
                break;
              }
              case 32: {
                LineNumber = input.ReadInt64();
                break;
              }
              case 40: {
                ColumnNumber = input.ReadInt64();
                break;
              }
              case 50: {
                if (loadModule_ == null) {
                  loadModule_ = new global::OpenTelemetry.Proto.Trace.V1.Module();
                }
                input.ReadMessage(loadModule_);
                break;
              }
              case 58: {
                if (sourceVersion_ == null) {
                  sourceVersion_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
                }
                input.ReadMessage(sourceVersion_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A collection of stack frames, which can be truncated.
      /// </summary>
      public sealed partial class StackFrames : pb::IMessage<StackFrames> {
        private static readonly pb::MessageParser<StackFrames> _parser = new pb::MessageParser<StackFrames>(() => new StackFrames());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StackFrames> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenTelemetry.Proto.Trace.V1.StackTrace.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StackFrames() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StackFrames(StackFrames other) : this() {
          frame_ = other.frame_.Clone();
          droppedFramesCount_ = other.droppedFramesCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StackFrames Clone() {
          return new StackFrames(this);
        }

        /// <summary>Field number for the "frame" field.</summary>
        public const int FrameFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame> _repeated_frame_codec
            = pb::FieldCodec.ForMessage(10, global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame.Parser);
        private readonly pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame> frame_ = new pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame>();
        /// <summary>
        /// Stack frames in this call stack.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::OpenTelemetry.Proto.Trace.V1.StackTrace.Types.StackFrame> Frame {
          get { return frame_; }
        }

        /// <summary>Field number for the "dropped_frames_count" field.</summary>
        public const int DroppedFramesCountFieldNumber = 2;
        private int droppedFramesCount_;
        /// <summary>
        /// The number of stack frames that were dropped because there
        /// were too many stack frames.
        /// If this value is 0, then no stack frames were dropped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DroppedFramesCount {
          get { return droppedFramesCount_; }
          set {
            droppedFramesCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StackFrames);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StackFrames other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!frame_.Equals(other.frame_)) return false;
          if (DroppedFramesCount != other.DroppedFramesCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= frame_.GetHashCode();
          if (DroppedFramesCount != 0) hash ^= DroppedFramesCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          frame_.WriteTo(output, _repeated_frame_codec);
          if (DroppedFramesCount != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DroppedFramesCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += frame_.CalculateSize(_repeated_frame_codec);
          if (DroppedFramesCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DroppedFramesCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StackFrames other) {
          if (other == null) {
            return;
          }
          frame_.Add(other.frame_);
          if (other.DroppedFramesCount != 0) {
            DroppedFramesCount = other.DroppedFramesCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                frame_.AddEntriesFrom(input, _repeated_frame_codec);
                break;
              }
              case 16: {
                DroppedFramesCount = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A description of a binary module.
  /// </summary>
  public sealed partial class Module : pb::IMessage<Module> {
    private static readonly pb::MessageParser<Module> _parser = new pb::MessageParser<Module>(() => new Module());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Module> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module(Module other) : this() {
      module_ = other.module_ != null ? other.module_.Clone() : null;
      buildId_ = other.buildId_ != null ? other.buildId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Module Clone() {
      return new Module(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int Module_FieldNumber = 1;
    private global::OpenTelemetry.Proto.Trace.V1.TruncatableString module_;
    /// <summary>
    /// TODO: document the meaning of this field.
    /// For example: main binary, kernel modules, and dynamic libraries
    /// such as libc.so, sharedlib.so.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.TruncatableString Module_ {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "build_id" field.</summary>
    public const int BuildIdFieldNumber = 2;
    private global::OpenTelemetry.Proto.Trace.V1.TruncatableString buildId_;
    /// <summary>
    /// A unique identifier for the module, usually a hash of its
    /// contents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::OpenTelemetry.Proto.Trace.V1.TruncatableString BuildId {
      get { return buildId_; }
      set {
        buildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Module);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Module other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Module_, other.Module_)) return false;
      if (!object.Equals(BuildId, other.BuildId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (module_ != null) hash ^= Module_.GetHashCode();
      if (buildId_ != null) hash ^= BuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (module_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Module_);
      }
      if (buildId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (module_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Module_);
      }
      if (buildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Module other) {
      if (other == null) {
        return;
      }
      if (other.module_ != null) {
        if (module_ == null) {
          module_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
        }
        Module_.MergeFrom(other.Module_);
      }
      if (other.buildId_ != null) {
        if (buildId_ == null) {
          buildId_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
        }
        BuildId.MergeFrom(other.BuildId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (module_ == null) {
              module_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            input.ReadMessage(module_);
            break;
          }
          case 18: {
            if (buildId_ == null) {
              buildId_ = new global::OpenTelemetry.Proto.Trace.V1.TruncatableString();
            }
            input.ReadMessage(buildId_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A string that might be shortened to a specified length.
  /// </summary>
  public sealed partial class TruncatableString : pb::IMessage<TruncatableString> {
    private static readonly pb::MessageParser<TruncatableString> _parser = new pb::MessageParser<TruncatableString>(() => new TruncatableString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TruncatableString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenTelemetry.Proto.Trace.V1.TraceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TruncatableString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TruncatableString(TruncatableString other) : this() {
      value_ = other.value_;
      truncatedByteCount_ = other.truncatedByteCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TruncatableString Clone() {
      return new TruncatableString(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    /// <summary>
    /// The shortened string. For example, if the original string was 500 bytes long and
    /// the limit of the string was 128 bytes, then this value contains the first 128
    /// bytes of the 500-byte string. Note that truncation always happens on a
    /// character boundary, to ensure that a truncated string is still valid UTF-8.
    /// Because it may contain multi-byte characters, the size of the truncated string
    /// may be less than the truncation limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "truncated_byte_count" field.</summary>
    public const int TruncatedByteCountFieldNumber = 2;
    private int truncatedByteCount_;
    /// <summary>
    /// The number of bytes removed from the original string. If this
    /// value is 0, then the string was not shortened.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TruncatedByteCount {
      get { return truncatedByteCount_; }
      set {
        truncatedByteCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TruncatableString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TruncatableString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (TruncatedByteCount != other.TruncatedByteCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (TruncatedByteCount != 0) hash ^= TruncatedByteCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (TruncatedByteCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TruncatedByteCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (TruncatedByteCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TruncatedByteCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TruncatableString other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.TruncatedByteCount != 0) {
        TruncatedByteCount = other.TruncatedByteCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 16: {
            TruncatedByteCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
