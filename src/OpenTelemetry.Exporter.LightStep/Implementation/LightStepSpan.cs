// <auto-generated/>
using System.Collections.Generic;

namespace OpenTelemetry.Exporter.LightStep.Implementation
{
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    
    internal class LightStepSpan
    {
        [JsonProperty("operationName")]
        public string OperationName { get; set; }
        
        [JsonProperty("startTimestamp")]
        public DateTime StartTimestamp { get; set; }
        
        [JsonProperty("durationMicros")]
        public ulong DurationMicros { get; set; }
        
        [JsonProperty("spanContext")]
        public SpanContext SpanContext { get; set; }
        
        [JsonProperty("tags")]
        public IList<Tag> Tags { get; set; } = new List<Tag>();
        
        [JsonProperty("logs")]
        public IList<Log> Logs { get; set; } = new List<Log>();
        
        [JsonProperty("references")]
        public IList<Reference> References { get; set; } = new List<Reference>();
    }

    internal class SpanContext
    {
        [JsonProperty("traceId", NullValueHandling = NullValueHandling.Ignore)]
        public ulong TraceId { get; set; }
        
        [JsonProperty("spanId", NullValueHandling = NullValueHandling.Ignore)]
        public ulong SpanId { get; set; }
    }

    internal class Tag
    {
        [JsonProperty("key")]
        public string Key { get; set; }
        
        [JsonProperty("stringValue")]
        public string StringValue { get; set; }
    }

    internal class Log
    {
        [JsonProperty("timestamp")]
        public DateTime Timestamp { get; set; }
        
        [JsonProperty("fields")]
        public IList<Tag> Fields { get; set; } = new List<Tag>();
    }

    internal class Reference
    {
        [JsonProperty("relationship")]
        public string Relationship { get; set; }
        
        [JsonProperty("spanContext")]
        public SpanContext SpanContext { get; set; }
    }
}
