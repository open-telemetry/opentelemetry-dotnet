OpenTelemetry.Exporter.Prometheus.PrometheusExporter
OpenTelemetry.Exporter.Prometheus.PrometheusExporter.PrometheusExporter(OpenTelemetry.Exporter.Prometheus.PrometheusExporterOptions options) -> void
OpenTelemetry.Exporter.Prometheus.PrometheusExporterExtensions
OpenTelemetry.Exporter.Prometheus.PrometheusExporterMetricsHttpServer
OpenTelemetry.Exporter.Prometheus.PrometheusExporterMetricsHttpServer.Dispose() -> void
OpenTelemetry.Exporter.Prometheus.PrometheusExporterMetricsHttpServer.PrometheusExporterMetricsHttpServer(OpenTelemetry.Exporter.Prometheus.PrometheusExporter exporter) -> void
OpenTelemetry.Exporter.Prometheus.PrometheusExporterMetricsHttpServer.Start(System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> void
OpenTelemetry.Exporter.Prometheus.PrometheusExporterMetricsHttpServer.Stop() -> void
OpenTelemetry.Exporter.Prometheus.PrometheusExporterOptions
OpenTelemetry.Exporter.Prometheus.PrometheusExporterOptions.PrometheusExporterOptions() -> void
OpenTelemetry.Exporter.Prometheus.PrometheusExporterOptions.Url.get -> string
OpenTelemetry.Exporter.Prometheus.PrometheusExporterOptions.Url.set -> void
override OpenTelemetry.Exporter.Prometheus.PrometheusExporter.ExportAsync(System.Collections.Generic.IEnumerable<OpenTelemetry.Metrics.Export.Metric> metrics, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<OpenTelemetry.Metrics.Export.MetricExporter.ExportResult>
static OpenTelemetry.Exporter.Prometheus.PrometheusExporterExtensions.GetMetricsCollection(this OpenTelemetry.Exporter.Prometheus.PrometheusExporter exporter) -> string
static OpenTelemetry.Exporter.Prometheus.PrometheusExporterExtensions.WriteMetricsCollection(this OpenTelemetry.Exporter.Prometheus.PrometheusExporter exporter, System.IO.StreamWriter writer) -> void
virtual OpenTelemetry.Exporter.Prometheus.PrometheusExporterMetricsHttpServer.Dispose(bool disposing) -> void